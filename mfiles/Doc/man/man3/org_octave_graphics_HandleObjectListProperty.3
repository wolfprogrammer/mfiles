.TH "HandleObjectListProperty" 3 "Tue Nov 27 2012" "Version 3.2" "Octave" \" -*- nroff -*-
.ad l
.nh
.SH NAME
HandleObjectListProperty \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBProperty\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBHandleObjectListProperty\fP (\fBPropertySet\fP \fBparent\fP, String \fBname\fP)"
.br
.ti -1c
.RI "\fBHandleObjectListProperty\fP (\fBPropertySet\fP \fBparent\fP, String \fBname\fP, int \fBmaxCount\fP)"
.br
.ti -1c
.RI "\fBProperty\fP \fBcloneProperty\fP ()"
.br
.ti -1c
.RI "double[] \fBgetHandleArray\fP ()"
.br
.ti -1c
.RI "void \fBaddElement\fP (\fBHandleObject\fP obj)"
.br
.ti -1c
.RI "void \fBremoveElement\fP (\fBHandleObject\fP obj)"
.br
.ti -1c
.RI "\fBHandleObject\fP \fBelementAt\fP (int index)"
.br
.ti -1c
.RI "int \fBsize\fP ()"
.br
.ti -1c
.RI "Iterator \fBiterator\fP ()"
.br
.ti -1c
.RI "boolean \fBcontains\fP (\fBHandleObject\fP obj)"
.br
.ti -1c
.RI "void \fBremoveAllElements\fP ()"
.br
.ti -1c
.RI "String \fBtoString\fP ()"
.br
.ti -1c
.RI "\fBPropertySet\fP \fBgetParent\fP ()"
.br
.ti -1c
.RI "String \fBgetName\fP ()"
.br
.ti -1c
.RI "boolean \fBisReadOnly\fP ()"
.br
.ti -1c
.RI "void \fBsetReadOnly\fP (boolean flag)"
.br
.ti -1c
.RI "boolean \fBisVisible\fP ()"
.br
.ti -1c
.RI "void \fBsetVisible\fP (boolean flag)"
.br
.ti -1c
.RI "Object \fBget\fP ()"
.br
.ti -1c
.RI "void \fBset\fP (Object value)  throws PropertyException 	"
.br
.ti -1c
.RI "void \fBset\fP (Object value, boolean warn_on_exception)"
.br
.ti -1c
.RI "void \fBreset\fP (Object value)"
.br
.ti -1c
.RI "void \fBlock\fP ()"
.br
.ti -1c
.RI "void \fBunLock\fP ()"
.br
.ti -1c
.RI "boolean \fBisSameValue\fP (Object value)"
.br
.ti -1c
.RI "void \fBdelete\fP ()"
.br
.ti -1c
.RI "void \fBaddHandleEventSink\fP (String \fBname\fP, \fBHandleEventSink\fP sink)"
.br
.ti -1c
.RI "void \fBremoveHandleEventSink\fP (\fBHandleEventSink\fP sink)"
.br
.ti -1c
.RI "boolean \fBhasHandleEvent\fP (String \fBname\fP)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBProperty\fP \fBcreateProperty\fP (\fBPropertySet\fP \fBparent\fP, String \fBname\fP, String type)  throws PropertyException 	"
.br
.ti -1c
.RI "static \fBProperty\fP \fBcreateProperty\fP (\fBPropertySet\fP \fBparent\fP, String \fBname\fP, String type, Object arg)  throws PropertyException 	"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBHandleObjectListProperty\fP (\fBHandleObjectListProperty\fP p)"
.br
.ti -1c
.RI "Object \fBgetInternal\fP ()"
.br
.ti -1c
.RI "Object \fBconvertValue\fP (Object value)  throws PropertyException 	"
.br
.ti -1c
.RI "void \fBinitDefault\fP ()"
.br
.ti -1c
.RI "void \fBsetInternal\fP (Object value)  throws PropertyException 	"
.br
.ti -1c
.RI "boolean \fBisEqual\fP (Object value)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "Object \fBpvalue\fP"
.br
.in -1c
.SS "Package Attributes"

.in +1c
.ti -1c
.RI "int \fBmaxCount\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "List \fBgetVisibleObjects\fP ()"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBHandleObjectListProperty\fP (\fBHandleObjectListProperty\fPp)\fC [inline, protected]\fP"
.PP
Referenced by HandleObjectListProperty\&.cloneProperty()\&.
.PP
.nf
        {
                super(p);
        }
.fi
.SS "\fBHandleObjectListProperty\fP (\fBPropertySet\fPparent, Stringname)\fC [inline]\fP"
.PP
References Property\&.name, and Property\&.parent\&.
.PP
.nf
        {
                this(parent, name, -1);
        }
.fi
.SS "\fBHandleObjectListProperty\fP (\fBPropertySet\fPparent, Stringname, intmaxCount)\fC [inline]\fP"
.PP
References HandleObjectListProperty\&.maxCount, and Property\&.pvalue\&.
.PP
.nf
        {
                super(parent, name);
                this\&.maxCount = maxCount;
                this\&.pvalue = new Vector();
        }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void \fBaddElement\fP (\fBHandleObject\fPobj)\fC [inline]\fP"
.PP
References HandleObjectListProperty\&.maxCount, and Property\&.pvalue\&.
.PP
Referenced by HandleObject\&.addChild(), BarseriesObject\&.BarseriesObject(), HandleObject\&.initProperties(), RootObject\&.removeChild(), and FigureObject\&.windowActivated()\&.
.PP
.nf
        {
                Vector objectList = (Vector)pvalue;
                if (maxCount <= 0 || objectList\&.size() < maxCount)
                        objectList\&.add(obj);
                else
                        objectList\&.set(maxCount-1, obj);
        }
.fi
.SS "void \fBaddHandleEventSink\fP (Stringname, \fBHandleEventSink\fPsink)\fC [inline, inherited]\fP"
.PP
Implements \fBHandleEventSource\fP\&.
.PP
References HandleEventSourceHelper\&.addHandleEventSink(), and Property\&.eventSource\&.
.PP
Referenced by HandleObject\&.listen(), and HandleObject\&.waitFor()\&.
.PP
.nf
        {
                eventSource\&.addHandleEventSink(name, sink);
        }
.fi
.SS "\fBProperty\fP \fBcloneProperty\fP ()\fC [inline, virtual]\fP"
.PP
Implements \fBProperty\fP\&.
.PP
References HandleObjectListProperty\&.HandleObjectListProperty()\&.
.PP
.nf
        {
                return new HandleObjectListProperty(this);
        }
.fi
.SS "boolean \fBcontains\fP (\fBHandleObject\fPobj)\fC [inline]\fP"
.PP
References Property\&.pvalue\&.
.PP
Referenced by HandleObject\&.validate()\&.
.PP
.nf
        {
                Vector objectList = (Vector)pvalue;
                return objectList\&.contains(obj);
        }
.fi
.SS "Object \fBconvertValue\fP (Objectvalue)  throws \fBPropertyException\fP 	\fC [inline, protected]\fP"
.PP
Reimplemented from \fBProperty\fP\&.
.PP
References HandleObject\&.getHandleObject()\&.
.PP
.nf
        {
                Vector v = new Vector();

                if (value == null)
                        return v;

                Class cls = value\&.getClass();

                if (value instanceof Number)
                {
                        double h = ((Number)value)\&.doubleValue();
                        try
                        {
                                v\&.add(HandleObject\&.getHandleObject(h));
                        }
                        catch (Exception e)
                        {
                                throw new PropertyException('invalid handle value - ' + h);
                        }
                }
                else if (value instanceof HandleObject)
                        v\&.add(value);
                else if ((cls\&.isArray() && cls\&.getComponentType()\&.equals(Double\&.TYPE)) ||
                         (value instanceof Matrix && ((Matrix)value)\&.getClassName()\&.equals('double')))
                {
                        double[] hv = (value instanceof Matrix ? ((Matrix)value)\&.toDouble() : (double[])value);
                        try
                        {
                                for (int i=0; i<hv\&.length; i++)
                                        v\&.add(HandleObject\&.getHandleObject(hv[i]));
                        }
                        catch (Exception e)
                        {
                                throw new PropertyException('invalid handle value');
                        }
                }
                else
                        throw new PropertyException('invalid property value - ' + value);

                return v;
        }
.fi
.SS "static \fBProperty\fP \fBcreateProperty\fP (\fBPropertySet\fPparent, Stringname, Stringtype)  throws \fBPropertyException\fP 	\fC [inline, static, inherited]\fP"
.PP
References Property\&.name, and Property\&.parent\&.
.PP
Referenced by Property\&.createProperty()\&.
.PP
.nf
        {
                if (type\&.equals('double'))
                        return new DoubleProperty(parent, name);
                else if (type\&.equals('string'))
                        return new StringProperty(parent, name);
                return null;
        }
.fi
.SS "static \fBProperty\fP \fBcreateProperty\fP (\fBPropertySet\fPparent, Stringname, Stringtype, Objectarg)  throws \fBPropertyException\fP 	\fC [inline, static, inherited]\fP"
.PP
References Property\&.createProperty(), Property\&.name, Property\&.parent, and Property\&.set()\&.
.PP
.nf
        {
                if (type\&.equals('radio'))
                {
                        String[] values = ((String)arg)\&.split('|');
                        return new RadioProperty(parent, name, values, '');
                }
                else
                {
                        Property p = createProperty(parent, name, type);
                        if (p != null)
                                p\&.set(arg);
                        return p;
                }
        }
.fi
.SS "void \fBdelete\fP ()\fC [inline, inherited]\fP"
.PP
References HandleEventSourceHelper\&.delete(), and Property\&.eventSource\&.
.PP
.nf
        {
                eventSource\&.delete();
        }
.fi
.SS "\fBHandleObject\fP \fBelementAt\fP (intindex)\fC [inline]\fP"
.PP
References Property\&.pvalue\&.
.PP
Referenced by AxesObject\&.autoScaleC(), HandleObject\&.delete(), HandleObject\&.deleteChildren(), ColorbarObject\&.doClear(), LegendObject\&.doClear(), BarseriesObject\&.doLayout(), HandleObject\&.getAncestor(), GraphicObject\&.getAxes(), AxesObject\&.getAxesContainer(), BarseriesObject\&.getBaseLine(), AxesObject\&.getCanvas(), AxesObject\&.getChildrenLimits(), HandleObject\&.getDefaultProperty(), UIControlObject\&.getParentComponent(), UIPanelObject\&.getParentComponent(), BarseriesObject\&.getPatch(), LegendObject\&.LegendObject(), RootObject\&.propertyChanged(), RootObject\&.removeChild(), FigureObject\&.removeChild(), ColorbarObject\&.updateImageFromColormap(), and HandleObject\&.validate()\&.
.PP
.nf
        {
                Vector objectList = (Vector)pvalue;
                return (HandleObject)objectList\&.elementAt(index);
        }
.fi
.SS "Object \fBget\fP ()\fC [inline, inherited]\fP"
.PP
Reimplemented in \fBNotImplProperty\fP\&.
.PP
References Property\&.getInternal()\&.
.PP
Referenced by BarseriesObject\&.BarseriesObject(), BarseriesObject\&.doLayout(), AxesObject\&.doZoom(), HandleObject\&.get(), LegendObject\&.LegendObject(), LegendObject\&.makeItemFromLine(), LegendObject\&.propertyChanged(), UnwindHandleObject\&.swapValues(), and CheckBoxControl\&.update()\&.
.PP
.nf
        {
                /* TODO: needed?
                if (!lockNotify)
                {
                        Iterator it = listenerList\&.iterator();
                        while (it\&.hasNext())
                                ((PropertyListener)it\&.next())\&.propertyGetting(this);
                }
                */
                return getInternal();
        }
.fi
.SS "double [] \fBgetHandleArray\fP ()\fC [inline]\fP"
.PP
References HandleObject\&.getHandle(), and HandleObjectListProperty\&.getVisibleObjects()\&.
.PP
Referenced by HandleObjectListProperty\&.getInternal()\&.
.PP
.nf
        {
                List l = getVisibleObjects();
                double[] hList = new double[l\&.size()];
                Iterator it = l\&.iterator();
                int index = 0;

                while (it\&.hasNext())
                {
                        HandleObject hObj = (HandleObject)it\&.next();
                        hList[index++] = hObj\&.getHandle();
                }
                return hList;
        }
.fi
.SS "Object \fBgetInternal\fP ()\fC [inline, protected]\fP"
.PP
Reimplemented from \fBProperty\fP\&.
.PP
References HandleObjectListProperty\&.getHandleArray()\&.
.PP
.nf
        {
                return getHandleArray();
        }
.fi
.SS "String \fBgetName\fP ()\fC [inline, inherited]\fP"
.PP
References Property\&.name\&.
.PP
Referenced by PropertySet\&.addProperty(), AxesObject\&.autoAxis(), NotImplProperty\&.get(), PropertySet\&.getNames(), NotImplProperty\&.set(), Property\&.set(), and PropertySet\&.show()\&.
.PP
.nf
        {
                return name;
        }
.fi
.SS "\fBPropertySet\fP \fBgetParent\fP ()\fC [inline, inherited]\fP"
.PP
References Property\&.parent\&.
.PP
Referenced by CallbackProperty\&.execute(), NotImplProperty\&.get(), Property\&.initDefault(), HandleObject\&.listen(), NotImplProperty\&.set(), and Property\&.set()\&.
.PP
.nf
        {
                return parent;
        }
.fi
.SS "List \fBgetVisibleObjects\fP ()\fC [inline, private]\fP"
.PP
References RootObject\&.getInstance(), HandleObject\&.HandleVisibility, RadioProperty\&.is(), RootObject\&.isCallbackMode(), BooleanProperty\&.isSet(), Property\&.pvalue, and RootObject\&.ShowHiddenHandles\&.
.PP
Referenced by HandleObjectListProperty\&.getHandleArray(), and HandleObjectListProperty\&.toString()\&.
.PP
.nf
        {
                List l = new LinkedList();
                Iterator it = ((Vector)pvalue)\&.iterator();
                boolean showAll = RootObject\&.getInstance()\&.ShowHiddenHandles\&.isSet();
                boolean callbackMode = RootObject\&.getInstance()\&.isCallbackMode();

                while (it\&.hasNext())
                {
                        HandleObject hObj = (HandleObject)it\&.next();
                        if (showAll || hObj\&.HandleVisibility\&.is('on') ||
                                        (callbackMode && hObj\&.HandleVisibility\&.is('callback')))
                                l\&.add(hObj);
                }
                return l;
        }
.fi
.SS "boolean \fBhasHandleEvent\fP (Stringname)\fC [inline, inherited]\fP"
.PP
Implements \fBHandleEventSource\fP\&.
.PP
References Property\&.eventSource, and HandleEventSourceHelper\&.hasHandleEvent()\&.
.PP
.nf
        {
                return eventSource\&.hasHandleEvent(name);
        }
.fi
.SS "void \fBinitDefault\fP ()\fC [inline, protected, inherited]\fP"
.PP
References HandleObject\&.getDefaultProperty(), Property\&.getParent(), HandleObject\&.getType(), Property\&.name, Property\&.parent, and Property\&.pvalue\&.
.PP
Referenced by Property\&.Property()\&.
.PP
.nf
        {
                HandleObject parent = (HandleObject)getParent();
                String defname = 'default' + parent\&.getType() + name;
                Property p = parent\&.getDefaultProperty(defname);

                if (p != null)
                        pvalue = p\&.pvalue;
        }
.fi
.SS "boolean \fBisEqual\fP (Objectvalue)\fC [inline, protected, inherited]\fP"
.PP
Reimplemented in \fBTextProperty\fP\&.
.PP
References Property\&.pvalue\&.
.PP
Referenced by Property\&.isSameValue(), and Property\&.set()\&.
.PP
.nf
        {
                /*Object v = getInternal();*/
                Object v = pvalue;
                return (value == null ? v == null : value\&.equals(v));
        }
.fi
.SS "boolean \fBisReadOnly\fP ()\fC [inline, inherited]\fP"
.PP
References Property\&.readOnly\&.
.PP
.nf
        {
                return readOnly;
        }
.fi
.SS "boolean \fBisSameValue\fP (Objectvalue)\fC [inline, inherited]\fP"
.PP
References Property\&.convertValue(), and Property\&.isEqual()\&.
.PP
Referenced by HandleObject\&.waitFor()\&.
.PP
.nf
        {
                try
                {
                        value = convertValue(value);
                        return isEqual(value);
                }
                catch (PropertyException e)
                {
                        return false;
                }
        }
.fi
.SS "boolean \fBisVisible\fP ()\fC [inline, inherited]\fP"
.PP
References Property\&.visible\&.
.PP
Referenced by PropertySet\&.getNames(), and PropertySet\&.show()\&.
.PP
.nf
        {
                return visible;
        }
.fi
.SS "Iterator \fBiterator\fP ()\fC [inline]\fP"
.PP
References Property\&.pvalue\&.
.PP
Referenced by AxesObject\&.autoLegend(), LegendObject\&.buildLegend(), BarseriesObject\&.delete(), AxesContainer\&.display(), GroupObject\&.draw(), AxesObject\&.draw(), RootObject\&.findFigure(), AxesContainer\&.getObjectForPoint(), BarseriesObject\&.propertyChanged(), AxesContainer\&.reshape(), GroupObject\&.updateLimits(), and GroupObject\&.validate()\&.
.PP
.nf
        {
                Vector objectList = (Vector)pvalue;
                return objectList\&.iterator();
        }
.fi
.SS "void \fBlock\fP ()\fC [inline, inherited]\fP"
.PP
References Property\&.lockNotify\&.
.PP
.nf
        {
                lockNotify = true;
        }
.fi
.SS "void \fBremoveAllElements\fP ()\fC [inline]\fP"
.PP
References Property\&.pvalue\&.
.PP
Referenced by RootObject\&.propertyChanged(), RootObject\&.removeChild(), and FigureObject\&.removeChild()\&.
.PP
.nf
        {
                Vector objectList = (Vector)pvalue;
                objectList\&.removeAllElements();
        }
.fi
.SS "void \fBremoveElement\fP (\fBHandleObject\fPobj)\fC [inline]\fP"
.PP
References Property\&.pvalue\&.
.PP
Referenced by BarseriesObject\&.delete(), and HandleObject\&.removeChild()\&.
.PP
.nf
        {
                Vector objectList = (Vector)pvalue;
                objectList\&.remove(obj);
        }
.fi
.SS "void \fBremoveHandleEventSink\fP (\fBHandleEventSink\fPsink)\fC [inline, inherited]\fP"
.PP
Implements \fBHandleEventSource\fP\&.
.PP
References Property\&.eventSource, and HandleEventSourceHelper\&.removeHandleEventSink()\&.
.PP
.nf
        {
                eventSource\&.removeHandleEventSink(sink);
        }
.fi
.SS "void \fBreset\fP (Objectvalue)\fC [inline, inherited]\fP"
.PP
References Property\&.lockNotify\&.
.PP
Referenced by BarseriesObject\&.BarseriesObject(), BaseLineObject\&.BaseLineObject(), ColorbarObject\&.buildColorbar(), LegendObject\&.buildLegend(), ColorbarObject\&.ColorbarObject(), HandleObject\&.delete(), LegendObject\&.doLayout(), AxesObject\&.draw(), AxesObject\&.getBaseLine(), ImageObject\&.ImageObject(), LegendObject\&.LegendObject(), LineObject\&.LineObject(), LegendObject\&.makeItemFromLine(), AxesObject\&.makeTextObject(), PatchObject\&.PatchObject(), FigureObject\&.print(), LineObject\&.propertyChanged(), BarseriesObject\&.propertyChanged(), TextObject\&.propertyChanged(), SurfaceObject\&.propertyChanged(), AxesObject\&.propertyChanged(), AxesObject\&.reset(), GraphicObject\&.set(), SurfaceObject\&.SurfaceObject(), UnwindHandleObject\&.swapValues(), TextObject\&.TextObject(), CheckBoxControl\&.update(), EditControl\&.update(), PopupMenuControl\&.update(), Edit2Control\&.update(), ListBoxControl\&.update(), AxesObject\&.updateXFormMatrices(), LineObject\&.validate(), SurfaceObject\&.validate(), and PatchObject\&.validate()\&.
.PP
.nf
        {
                boolean oldLockNotify = lockNotify;

                lockNotify = true;
                try { set(value); }
                catch (PropertyException e)
                {
                        System\&.err\&.println('WARNING: exception during property reset: ' + e);
                }
                lockNotify = oldLockNotify;
        }
.fi
.SS "void \fBset\fP (Objectvalue)  throws \fBPropertyException\fP 	\fC [inline, inherited]\fP"
.PP
Reimplemented in \fBBooleanProperty\fP, and \fBNotImplProperty\fP\&.
.PP
References Property\&.convertValue(), Property\&.eventSource, HandleEventSourceHelper\&.fireEvent(), Property\&.getName(), Property\&.getParent(), Property\&.isEqual(), Property\&.lockNotify, Property\&.readOnly, Property\&.setFlag, and Property\&.setInternal()\&.
.PP
Referenced by HandleObject\&.autoSet(), BarseriesObject\&.BarseriesObject(), ColorbarObject\&.buildColorbar(), Property\&.createProperty(), BarseriesObject\&.doLayout(), LegendObject\&.doLayout(), ColorbarObject\&.doLocate(), LegendObject\&.doLocate(), AxesObject\&.doZoom(), AxesObject\&.draw(), UIControlObject\&.propertyChanged(), UIPanelObject\&.propertyChanged(), BarseriesObject\&.propertyChanged(), LegendObject\&.propertyChanged(), PatchObject\&.propertyChanged(), AxesObject\&.propertyChanged(), HandleObject\&.set(), AxesObject\&.unZoom(), ColorbarObject\&.updateActivePosition(), LegendObject\&.updateActivePosition(), SurfaceObject\&.updateColorMinMax(), ColorbarObject\&.updateImageFromColormap(), GroupObject\&.updateLimits(), BaseLineObject\&.updateLine(), ImageObject\&.updateMinMax(), LineObject\&.updateMinMax(), SurfaceObject\&.updateMinMax(), PatchObject\&.updateMinMax(), and TextObject\&.updateMinMax()\&.
.PP
.nf
        {
                if (readOnly)
                        throw new PropertyException('read-only property - ' + getName());

                value = convertValue(value);
                if (isEqual(value))
                {
                        //System\&.out\&.println(getName() + ': identical value, not setting - ' + value\&.toString());
                        return;
                }

                if (setFlag)
                {
                        System\&.out\&.println('WARNING: ' + getName() + '\&.set (' + ((HandleObject)getParent())\&.getHandle() + '): recursive behavior detected, not setting');
                        Thread\&.dumpStack();
                        return;
                }

                setFlag = true;
                try
                {
                        /* TODO: needed?
                        if (!lockNotify)
                        {
                                Iterator it = listenerList\&.iterator();
                                while (it\&.hasNext())
                                        ((PropertyListener)it\&.next())\&.propertySetting(this, value);
                        }
                        */
                        setInternal(value);
                        if (!lockNotify)
                        {
                                eventSource\&.fireEvent('PropertyChanged');
                        }
                        setFlag = false;
                }
                catch (Exception e)
                {
                        setFlag = false;
                        if (e instanceof PropertyException)
                                throw (PropertyException)e;
                        else
                                throw new PropertyException(e);
                }
        }
.fi
.SS "void \fBset\fP (Objectvalue, booleanwarn_on_exception)\fC [inline, inherited]\fP"
.PP
References Property\&.getName()\&.
.PP
.nf
        {
                try { set(value); }
                catch (PropertyException e)
                {
                        if (warn_on_exception)
                        {
                                System\&.out\&.println('WARNING: ' + getName() + '\&.set: exception occured');
                                e\&.printStackTrace();
                        }
                }
        }
.fi
.SS "void \fBsetInternal\fP (Objectvalue)  throws \fBPropertyException\fP 	\fC [inline, protected, inherited]\fP"
.PP
Reimplemented in \fBArrayProperty\fP, and \fBTextProperty\fP\&.
.PP
References Property\&.pvalue\&.
.PP
Referenced by Property\&.set()\&.
.PP
.nf
        {
                pvalue = value;
        }
.fi
.SS "void \fBsetReadOnly\fP (booleanflag)\fC [inline, inherited]\fP"
.PP
References Property\&.readOnly\&.
.PP
.nf
        {
                readOnly = flag;
        }
.fi
.SS "void \fBsetVisible\fP (booleanflag)\fC [inline, inherited]\fP"
.PP
References Property\&.visible\&.
.PP
Referenced by AxesObject\&.AxesObject(), BarseriesObject\&.BarseriesObject(), BaseLineObject\&.BaseLineObject(), FigureObject\&.FigureObject(), GraphicObject\&.GraphicObject(), and PatchObject\&.PatchObject()\&.
.PP
.nf
        {
                visible = flag;
        }
.fi
.SS "int \fBsize\fP ()\fC [inline]\fP"
.PP
References Property\&.pvalue\&.
.PP
Referenced by AxesObject\&.autoScaleC(), BarseriesObject\&.delete(), HandleObject\&.deleteChildren(), ColorbarObject\&.doClear(), LegendObject\&.doClear(), BarseriesObject\&.doLayout(), HandleObject\&.getAncestor(), AxesObject\&.getAxesContainer(), AxesObject\&.getChildrenLimits(), HandleObject\&.getDefaultProperty(), UIControlObject\&.getParentComponent(), UIPanelObject\&.getParentComponent(), RootObject\&.isCallbackMode(), RootObject\&.propertyChanged(), RootObject\&.removeChild(), FigureObject\&.removeChild(), and HandleObject\&.validate()\&.
.PP
.nf
        {
                Vector objectList = (Vector)pvalue;
                return objectList\&.size();
        }
.fi
.SS "String \fBtoString\fP ()\fC [inline]\fP"
.PP
References HandleObject\&.getHandle(), HandleObjectListProperty\&.getVisibleObjects(), and Utils\&.handleToString()\&.
.PP
.nf
        {
                List objectList = getVisibleObjects();
                String buf = '[ ';
                Iterator it = objectList\&.iterator();

                while (it\&.hasNext())
                {
                        HandleObject hObj = (HandleObject)it\&.next();
                        buf += (Utils\&.handleToString(hObj\&.getHandle()) + ' ');
                        if (buf\&.length() > 64)
                                return ('[ 1 x ' + objectList\&.size() + ' handle array ]');
                }
                buf += ']';

                return buf;
        }
.fi
.SS "void \fBunLock\fP ()\fC [inline, inherited]\fP"
.PP
References Property\&.lockNotify\&.
.PP
Referenced by HandleObject\&.addProperty(), and PropertySet\&.validate()\&.
.PP
.nf
        {
                lockNotify = false;
        }
.fi
.SH "Member Data Documentation"
.PP 
.SS "int \fBmaxCount\fP\fC [package]\fP"
.PP
Referenced by HandleObjectListProperty\&.addElement(), and HandleObjectListProperty\&.HandleObjectListProperty()\&.
.SS "Object \fBpvalue\fP\fC [protected, inherited]\fP"
.PP
Referenced by HandleObjectListProperty\&.addElement(), ArrayProperty\&.ArrayProperty(), BooleanProperty\&.BooleanProperty(), CallbackProperty\&.CallbackProperty(), ColorProperty\&.ColorProperty(), HandleObjectListProperty\&.contains(), DoubleProperty\&.DoubleProperty(), DoubleRadioProperty\&.DoubleRadioProperty(), DoubleProperty\&.doubleValue(), DoubleRadioProperty\&.doubleValue(), HandleObjectListProperty\&.elementAt(), DoubleProperty\&.floatValue(), StringArrayProperty\&.getArray(), CallbackProperty\&.getCallback(), ArrayProperty\&.getClassName(), ColorProperty\&.getColor(), ArrayProperty\&.getDim(), TextProperty\&.getInternal(), Property\&.getInternal(), ColorProperty\&.getInternal(), ArrayProperty\&.getMatrix(), ArrayProperty\&.getNDims(), ObjectProperty\&.getObject(), TextProperty\&.getText(), RadioProperty\&.getValue(), VectorProperty\&.getVector(), HandleObjectListProperty\&.getVisibleObjects(), HandleObjectListProperty\&.HandleObjectListProperty(), Property\&.initDefault(), DoubleProperty\&.intValue(), DoubleRadioProperty\&.is(), ColorProperty\&.is(), DoubleRadioProperty\&.isDouble(), ArrayProperty\&.isEmpty(), TextProperty\&.isEqual(), Property\&.isEqual(), ColorProperty\&.isSet(), HandleObjectListProperty\&.iterator(), LineStyleProperty\&.LineStyleProperty(), MarkerProperty\&.MarkerProperty(), ObjectProperty\&.ObjectProperty(), Property\&.Property(), RadioProperty\&.RadioProperty(), HandleObjectListProperty\&.removeAllElements(), HandleObjectListProperty\&.removeElement(), TextProperty\&.setInternal(), Property\&.setInternal(), HandleObjectListProperty\&.size(), StringArrayProperty\&.StringArrayProperty(), StringProperty\&.StringProperty(), TextProperty\&.TextProperty(), ObjectProperty\&.toString(), StringProperty\&.toString(), RadioProperty\&.toString(), DoubleRadioProperty\&.toString(), VectorProperty\&.toString(), ArrayProperty\&.toString(), ColorProperty\&.toString(), and VectorProperty\&.VectorProperty()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Octave from the source code\&.
