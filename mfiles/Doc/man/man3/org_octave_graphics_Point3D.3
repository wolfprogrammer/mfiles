.TH "Point3D" 3 "Tue Nov 27 2012" "Version 3.2" "Octave" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Point3D \- 
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPoint3D\fP (double \fBx\fP, double \fBy\fP, double \fBz\fP)"
.br
.ti -1c
.RI "\fBPoint3D\fP (double[] pt)"
.br
.ti -1c
.RI "void \fBadd\fP (\fBPoint3D\fP pt)"
.br
.ti -1c
.RI "void \fBadd\fP (double[] p)"
.br
.ti -1c
.RI "void \fBadd\fP (double _x, double _y, double _z)"
.br
.ti -1c
.RI "void \fBsub\fP (\fBPoint3D\fP p)"
.br
.ti -1c
.RI "void \fBsub\fP (double[] p)"
.br
.ti -1c
.RI "double \fBnorm\fP ()"
.br
.ti -1c
.RI "double \fBdot\fP (\fBPoint3D\fP p)"
.br
.ti -1c
.RI "double \fBdot\fP (double[] p)"
.br
.ti -1c
.RI "void \fBscale\fP (double s)"
.br
.ti -1c
.RI "void \fBnormalize\fP ()"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "double \fBx\fP"
.br
.in -1c
.SS "Package Attributes"

.in +1c
.ti -1c
.RI "double \fBy\fP"
.br
.ti -1c
.RI "double \fBz\fP"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBPoint3D\fP (doublex, doubley, doublez)\fC [inline]\fP"
.PP
References Point3D\&.x, Point3D\&.y, and Point3D\&.z\&.
.PP
.nf
        {
                this\&.x = x;
                this\&.y = y;
                this\&.z = z;
        }
.fi
.SS "\fBPoint3D\fP (double[]pt)\fC [inline]\fP"
.PP
.nf
        {
                this(pt[0], pt[1], pt[2]);
        }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void \fBadd\fP (\fBPoint3D\fPpt)\fC [inline]\fP"
.PP
References Point3D\&.x, Point3D\&.y, and Point3D\&.z\&.
.PP
Referenced by GLRenderer\&.PatchTessellatorAlpha\&.addLinePrimitive(), and GLRenderer\&.PatchTessellatorAlpha\&.vertex()\&.
.PP
.nf
        {
                x += pt\&.x;
                y += pt\&.y;
                z += pt\&.z;
        }
.fi
.SS "void \fBadd\fP (double[]p)\fC [inline]\fP"
.PP
References Point3D\&.x, Point3D\&.y, and Point3D\&.z\&.
.PP
.nf
        {
                x += p[0];
                y += p[1];
                if (p\&.length > 2)
                        z += p[2];
        }
.fi
.SS "void \fBadd\fP (double_x, double_y, double_z)\fC [inline]\fP"
.PP
References Point3D\&.x, Point3D\&.y, and Point3D\&.z\&.
.PP
.nf
        {
                x += _x;
                y += _y;
                z += _z;
        }
.fi
.SS "double \fBdot\fP (\fBPoint3D\fPp)\fC [inline]\fP"
.PP
References Point3D\&.x, Point3D\&.y, and Point3D\&.z\&.
.PP
Referenced by GLRenderer\&.PatchTessellatorAlpha\&.addLinePrimitive(), and GLRenderer\&.PatchTessellatorAlpha\&.vertex()\&.
.PP
.nf
        {
                return (x*p\&.x+y*p\&.y+z*p\&.z);
        }
.fi
.SS "double \fBdot\fP (double[]p)\fC [inline]\fP"
.PP
References Point3D\&.x, Point3D\&.y, and Point3D\&.z\&.
.PP
.nf
        {
                return (x*p[0]+y*p[1]+(p\&.length > 2 ? z*p[2] : 0));
        }
.fi
.SS "double \fBnorm\fP ()\fC [inline]\fP"
.PP
References Point3D\&.x, Point3D\&.y, and Point3D\&.z\&.
.PP
Referenced by Point3D\&.normalize()\&.
.PP
.nf
        {
                return Math\&.sqrt(x*x+y*y+z*z);
        }
.fi
.SS "void \fBnormalize\fP ()\fC [inline]\fP"
.PP
References Point3D\&.norm(), and Point3D\&.scale()\&.
.PP
.nf
        {
                scale(1/norm());
        }
.fi
.SS "void \fBscale\fP (doubles)\fC [inline]\fP"
.PP
References Point3D\&.x, Point3D\&.y, and Point3D\&.z\&.
.PP
Referenced by GLRenderer\&.PatchTessellatorAlpha\&.addLinePrimitive(), Point3D\&.normalize(), and GLRenderer\&.PatchTessellatorAlpha\&.vertex()\&.
.PP
.nf
        {
                x /= s;
                y /= s;
                z /= s;
        }
.fi
.SS "void \fBsub\fP (\fBPoint3D\fPp)\fC [inline]\fP"
.PP
References Point3D\&.x, Point3D\&.y, and Point3D\&.z\&.
.PP
Referenced by GLRenderer\&.PatchTessellatorAlpha\&.addLinePrimitive(), and GLRenderer\&.PatchTessellatorAlpha\&.vertex()\&.
.PP
.nf
        {
                x -= p\&.x;
                y -= p\&.y;
                z -= p\&.z;
        }
.fi
.SS "void \fBsub\fP (double[]p)\fC [inline]\fP"
.PP
References Point3D\&.x, Point3D\&.y, and Point3D\&.z\&.
.PP
.nf
        {
                x -= p[0];
                y -= p[1];
                if (p\&.length > 2)
                        z -= p[2];
        }
.fi
.SH "Member Data Documentation"
.PP 
.SS "double \fBx\fP"
.PP
Referenced by Point3D\&.add(), Point3D\&.dot(), J2DRenderer\&.drawQuads(), GLRenderer\&.drawQuads(), J2DRenderer\&.drawSegments(), GLRenderer\&.drawSegments(), Point3D\&.norm(), Point3D\&.Point3D(), Point3D\&.scale(), and Point3D\&.sub()\&.
.SS "double \fBy\fP\fC [package]\fP"
.PP
Referenced by Point3D\&.add(), Point3D\&.dot(), J2DRenderer\&.drawQuads(), GLRenderer\&.drawQuads(), J2DRenderer\&.drawSegments(), GLRenderer\&.drawSegments(), Point3D\&.norm(), Point3D\&.Point3D(), Point3D\&.scale(), and Point3D\&.sub()\&.
.SS "double \fBz\fP\fC [package]\fP"
.PP
Referenced by Point3D\&.add(), Point3D\&.dot(), J2DRenderer\&.drawQuads(), GLRenderer\&.drawQuads(), J2DRenderer\&.drawSegments(), GLRenderer\&.drawSegments(), Point3D\&.norm(), Point3D\&.Point3D(), Point3D\&.scale(), and Point3D\&.sub()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Octave from the source code\&.
