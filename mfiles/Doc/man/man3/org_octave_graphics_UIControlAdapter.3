.TH "UIControlAdapter" 3 "Tue Nov 27 2012" "Version 3.2" "Octave" \" -*- nroff -*-
.ad l
.nh
.SH NAME
UIControlAdapter \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits Panel, \fBPositionable\fP, and \fBMouseListener\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBUIControlAdapter\fP (\fBUIControlObject\fP obj)  throws IllegalArgumentException 	"
.br
.ti -1c
.RI "void \fBupdate\fP ()"
.br
.ti -1c
.RI "void \fBdispose\fP ()"
.br
.ti -1c
.RI "Component \fBgetComponent\fP ()"
.br
.ti -1c
.RI "void \fBpropertyChanged\fP (\fBProperty\fP p)  throws PropertyException 	"
.br
.ti -1c
.RI "double[] \fBgetPosition\fP ()"
.br
.ti -1c
.RI "void \fBmouseClicked\fP (MouseEvent e)"
.br
.ti -1c
.RI "void \fBmouseEntered\fP (MouseEvent e)"
.br
.ti -1c
.RI "void \fBmouseExited\fP (MouseEvent e)"
.br
.ti -1c
.RI "void \fBmousePressed\fP (MouseEvent e)"
.br
.ti -1c
.RI "void \fBmouseReleased\fP (MouseEvent e)"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBinit\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBUIControl\fP \fBctrl\fP"
.br
.ti -1c
.RI "\fBUIControlObject\fP \fBuiObj\fP"
.br
.ti -1c
.RI "\fBHandleEventSinkAdapter\fP \fBsink\fP"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBUIControlAdapter\fP (\fBUIControlObject\fPobj)  throws IllegalArgumentException 	\fC [inline]\fP"
.PP
References UIControlAdapter\&.ctrl, HandleEvent\&.getProperty(), UIControlAdapter\&.init(), HandleEventSinkAdapter\&.listen(), UIControlAdapter\&.propertyChanged(), UIControlAdapter\&.sink, and UIControlAdapter\&.uiObj\&.
.PP
.nf
        {
                super(new BorderLayout());

                String style = obj\&.Style\&.toString();

                if (style\&.equalsIgnoreCase('pushbutton'))
                        this\&.ctrl = new PushButtonControl(obj);
                else if (style\&.equalsIgnoreCase('edit'))
                {
                        if ((obj\&.Max\&.doubleValue()-obj\&.Min\&.doubleValue()) <= 1\&.0)
                                this\&.ctrl = new EditControl(obj);
                        else
                                this\&.ctrl = new Edit2Control(obj);
                }
                else if (style\&.equalsIgnoreCase('popupmenu'))
                        this\&.ctrl = new PopupMenuControl(obj);
                else if (style\&.equalsIgnoreCase('text'))
                        this\&.ctrl = new TextControl(obj);
                else if (style\&.equalsIgnoreCase('listbox'))
                        this\&.ctrl = new ListBoxControl(obj);
                else if (style\&.equalsIgnoreCase('checkbox'))
                        this\&.ctrl = new CheckBoxControl(obj);
                else
                        throw new IllegalArgumentException('unsupported UI style `' + style + ''');
                this\&.uiObj = obj;
                init();
                add((JComponent)ctrl, BorderLayout\&.CENTER);

                sink = new HandleEventSinkAdapter() {
                        public void eventOccured(HandleEvent evt) throws PropertyException
                        { propertyChanged(evt\&.getProperty()); }
                };
                sink\&.listen(obj\&.Position);
                sink\&.listen(obj\&.BackgroundColor);
                sink\&.listen(obj\&.ForegroundColor);
                sink\&.listen(obj\&.FontAngle);
                sink\&.listen(obj\&.FontName);
                sink\&.listen(obj\&.FontSize);
                sink\&.listen(obj\&.FontWeight);
                sink\&.listen(obj\&.TooltipString);
                sink\&.listen(obj\&.Enable);
        }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void \fBdispose\fP ()\fC [inline]\fP"
.PP
References UIControlAdapter\&.ctrl, UIControl\&.dispose(), HandleEventSinkAdapter\&.dispose(), and UIControlAdapter\&.sink\&.
.PP
Referenced by UIControlObject\&.deleteComponent()\&.
.PP
.nf
        {
                if (ctrl != null)
                        ctrl\&.dispose();
                if (getParent() != null)
                        getParent()\&.remove(this);
                sink\&.dispose();
        }
.fi
.SS "Component \fBgetComponent\fP ()\fC [inline]\fP"
.PP
References UIControlAdapter\&.ctrl, and UIControl\&.getComponent()\&.
.PP
Referenced by UIControlObject\&.getComponent()\&.
.PP
.nf
        {
                return ctrl\&.getComponent();
        }
.fi
.SS "double [] \fBgetPosition\fP ()\fC [inline]\fP"
.PP
Implements \fBPositionable\fP\&.
.PP
References UIControlObject\&.getPosition(), and UIControlAdapter\&.uiObj\&.
.PP
.nf
        {
                return uiObj\&.getPosition();
        }
.fi
.SS "void \fBinit\fP ()\fC [inline, private]\fP"
.PP
References UIControlObject\&.BackgroundColor, UIControlAdapter\&.ctrl, UIControlObject\&.Enable, UIControlObject\&.FontAngle, UIControlObject\&.FontName, UIControlObject\&.FontSize, UIControlObject\&.FontUnits, UIControlObject\&.FontWeight, UIControlObject\&.ForegroundColor, ColorProperty\&.getColor(), UIControl\&.getComponent(), Utils\&.getFont(), UIControlObject\&.getPosition(), RadioProperty\&.is(), UIControlObject\&.TooltipString, StringProperty\&.toString(), and UIControlAdapter\&.uiObj\&.
.PP
Referenced by UIControlAdapter\&.UIControlAdapter()\&.
.PP
.nf
        {
                JComponent comp1 = ctrl\&.getComponent();

                comp1\&.setBackground(uiObj\&.BackgroundColor\&.getColor());
                comp1\&.setForeground(uiObj\&.ForegroundColor\&.getColor());
                double[] pos = uiObj\&.getPosition();
                setBounds((int)pos[0], (int)pos[1], (int)pos[2], (int)pos[3]);
                if (uiObj\&.TooltipString\&.toString()\&.length() > 0)
                        comp1\&.setToolTipText(uiObj\&.TooltipString\&.toString());
                comp1\&.setFont(Utils\&.getFont(uiObj\&.FontName, uiObj\&.FontSize, uiObj\&.FontUnits,
                                uiObj\&.FontAngle, uiObj\&.FontWeight, getHeight()));
                comp1\&.setEnabled(!uiObj\&.Enable\&.is('off'));
                comp1\&.addMouseListener(this);
        }
.fi
.SS "void \fBmouseClicked\fP (MouseEvente)\fC [inline]\fP"
.PP
.nf
{}
.fi
.SS "void \fBmouseEntered\fP (MouseEvente)\fC [inline]\fP"
.PP
.nf
{}
.fi
.SS "void \fBmouseExited\fP (MouseEvente)\fC [inline]\fP"
.PP
.nf
{}
.fi
.SS "void \fBmousePressed\fP (MouseEvente)\fC [inline]\fP"
.PP
References HandleObject\&.doButtonDownFcn(), UIControlObject\&.Enable, RadioProperty\&.is(), and UIControlAdapter\&.uiObj\&.
.PP
.nf
        {
                boolean doCB = false;

                switch (e\&.getButton())
                {
                        case MouseEvent\&.BUTTON2:
                        case MouseEvent\&.BUTTON3:
                                doCB = true;
                                break;
                        case MouseEvent\&.BUTTON1:
                                doCB = !uiObj\&.Enable\&.is('on');
                                break;
                }

                if (doCB)
                        uiObj\&.doButtonDownFcn(e);
        }
.fi
.SS "void \fBmouseReleased\fP (MouseEvente)\fC [inline]\fP"
.PP
.nf
{}
.fi
.SS "void \fBpropertyChanged\fP (\fBProperty\fPp)  throws \fBPropertyException\fP 	\fC [inline]\fP"
.PP
References UIControlObject\&.BackgroundColor, UIControlAdapter\&.ctrl, UIControlObject\&.Enable, UIControlObject\&.FontAngle, UIControlObject\&.FontName, UIControlObject\&.FontSize, UIControlObject\&.FontUnits, UIControlObject\&.FontWeight, UIControlObject\&.ForegroundColor, ColorProperty\&.getColor(), UIControl\&.getComponent(), Utils\&.getFont(), RadioProperty\&.is(), UIControlObject\&.Position, UIControlObject\&.TooltipString, StringProperty\&.toString(), and UIControlAdapter\&.uiObj\&.
.PP
Referenced by UIControlAdapter\&.UIControlAdapter()\&.
.PP
.nf
        {
                if (ctrl != null)
                {
                        JComponent comp1 = ctrl\&.getComponent();

                        if (p == uiObj\&.BackgroundColor)
                                comp1\&.setBackground(uiObj\&.BackgroundColor\&.getColor());
                        else if (p == uiObj\&.ForegroundColor)
                                comp1\&.setForeground(uiObj\&.ForegroundColor\&.getColor());
                        else if (p == uiObj\&.Position)
                        {
                                getParent()\&.doLayout();
                                getParent()\&.validate();
                                if (uiObj\&.FontUnits\&.is('normalized'))
                                        comp1\&.setFont(Utils\&.getFont(uiObj\&.FontName, uiObj\&.FontSize, uiObj\&.FontUnits,
                                                uiObj\&.FontAngle, uiObj\&.FontWeight, getHeight()));
                        }
                        else if (p == uiObj\&.FontAngle || p == uiObj\&.FontSize || p == uiObj\&.FontWeight || p == uiObj\&.FontName)
                                comp1\&.setFont(Utils\&.getFont(uiObj\&.FontName, uiObj\&.FontSize, uiObj\&.FontUnits,
                                        uiObj\&.FontAngle, uiObj\&.FontWeight, getHeight()));
                        else if (p == uiObj\&.TooltipString)
                        {
                                if (uiObj\&.TooltipString\&.toString()\&.length() > 0)
                                        comp1\&.setToolTipText(uiObj\&.TooltipString\&.toString());
                                else
                                        comp1\&.setToolTipText(null);
                        }
                        else if (p == uiObj\&.Enable)
                                comp1\&.setEnabled(!uiObj\&.Enable\&.is('off'));
                }
        }
.fi
.SS "void \fBupdate\fP ()\fC [inline]\fP"
.PP
References UIControlAdapter\&.ctrl, and UIControl\&.update()\&.
.PP
Referenced by UIControlObject\&.get(), and UIControlObject\&.set()\&.
.PP
.nf
{ if (ctrl != null) ctrl\&.update(); }
.fi
.SH "Member Data Documentation"
.PP 
.SS "\fBUIControl\fP \fBctrl\fP\fC [private]\fP"
.PP
Referenced by UIControlAdapter\&.dispose(), UIControlAdapter\&.getComponent(), UIControlAdapter\&.init(), UIControlAdapter\&.propertyChanged(), UIControlAdapter\&.UIControlAdapter(), and UIControlAdapter\&.update()\&.
.SS "\fBHandleEventSinkAdapter\fP \fBsink\fP\fC [private]\fP"
.PP
Referenced by UIControlAdapter\&.dispose(), and UIControlAdapter\&.UIControlAdapter()\&.
.SS "\fBUIControlObject\fP \fBuiObj\fP\fC [private]\fP"
.PP
Referenced by UIControlAdapter\&.getPosition(), UIControlAdapter\&.init(), UIControlAdapter\&.mousePressed(), UIControlAdapter\&.propertyChanged(), and UIControlAdapter\&.UIControlAdapter()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Octave from the source code\&.
