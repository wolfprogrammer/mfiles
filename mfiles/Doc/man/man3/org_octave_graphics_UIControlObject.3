.TH "UIControlObject" 3 "Tue Nov 27 2012" "Version 3.2" "Octave" \" -*- nroff -*-
.ad l
.nh
.SH NAME
UIControlObject \- 
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBHandleObject\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBUIControlObject\fP (\fBHandleObject\fP parent)"
.br
.ti -1c
.RI "void \fBdelete\fP ()"
.br
.ti -1c
.RI "void \fBvalidate\fP ()"
.br
.ti -1c
.RI "\fBUIControlAdapter\fP \fBmakeControl\fP ()"
.br
.ti -1c
.RI "double[] \fBgetPosition\fP ()"
.br
.ti -1c
.RI "Rectangle \fBgetBounds\fP ()"
.br
.ti -1c
.RI "Component \fBgetComponent\fP ()"
.br
.ti -1c
.RI "Component \fBgetParentComponent\fP ()"
.br
.ti -1c
.RI "void \fBpropertyChanged\fP (\fBProperty\fP p)  throws PropertyException 	"
.br
.ti -1c
.RI "Object \fBget\fP (\fBProperty\fP p)"
.br
.ti -1c
.RI "void \fBset\fP (\fBProperty\fP p, Object value)  throws PropertyException 	"
.br
.ti -1c
.RI "void \fBcontrolActivated\fP (\fBUIControlEvent\fP event)"
.br
.ti -1c
.RI "double \fBgetHandle\fP ()"
.br
.ti -1c
.RI "String \fBgetType\fP ()"
.br
.ti -1c
.RI "\fBProperty\fP \fBgetDefaultProperty\fP (String name)"
.br
.ti -1c
.RI "void \fBdeleteChildren\fP ()"
.br
.ti -1c
.RI "boolean \fBisLegendable\fP ()"
.br
.ti -1c
.RI "void \fBaddChild\fP (\fBHandleObject\fP child)"
.br
.ti -1c
.RI "void \fBremoveChild\fP (\fBHandleObject\fP child)"
.br
.ti -1c
.RI "void \fBaddProperty\fP (\fBProperty\fP p)"
.br
.ti -1c
.RI "boolean \fBisValid\fP ()"
.br
.ti -1c
.RI "void \fBsetCachedData\fP (Renderer\&.CachedData d)"
.br
.ti -1c
.RI "Renderer\&.CachedData \fBgetCachedData\fP ()"
.br
.ti -1c
.RI "\fBHandleObject\fP \fBgetAncestor\fP (String type)"
.br
.ti -1c
.RI "Object \fBget\fP (String name)  throws PropertyException 	"
.br
.ti -1c
.RI "void \fBset\fP (String name, Object value)  throws PropertyException 	"
.br
.ti -1c
.RI "void \fBwaitFor\fP ()"
.br
.ti -1c
.RI "void \fBwaitFor\fP (String pname)"
.br
.ti -1c
.RI "void \fBwaitFor\fP (String pname, Object value)"
.br
.ti -1c
.RI "void \fBdoButtonDownFcn\fP (MouseEvent e)"
.br
.ti -1c
.RI "void \fBaddHandleEventSink\fP (String name, \fBHandleEventSink\fP sink)"
.br
.ti -1c
.RI "void \fBremoveHandleEventSink\fP (\fBHandleEventSink\fP sink)"
.br
.ti -1c
.RI "boolean \fBhasHandleEvent\fP (String name)"
.br
.ti -1c
.RI "void \fBeventOccured\fP (\fBHandleEvent\fP evt)  throws PropertyException 	"
.br
.ti -1c
.RI "void \fBsourceDeleted\fP (Object source)"
.br
.ti -1c
.RI "boolean \fBexecuteOnce\fP ()"
.br
.ti -1c
.RI "\fBProperty\fP \fBgetProperty\fP (String name)"
.br
.ti -1c
.RI "boolean \fBhasProperty\fP (String name)"
.br
.ti -1c
.RI "void \fBshow\fP ()"
.br
.ti -1c
.RI "String[] \fBgetNames\fP ()"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static boolean \fBisHandle\fP (double \fBhandle\fP)"
.br
.ti -1c
.RI "static \fBHandleObject\fP \fBgetHandleObject\fP (double \fBhandle\fP)  throws Exception 	"
.br
.ti -1c
.RI "static void \fBremoveHandleObject\fP (double \fBhandle\fP)"
.br
.ti -1c
.RI "static void \fBaddHandleObject\fP (double \fBhandle\fP, \fBHandleObject\fP obj)"
.br
.ti -1c
.RI "static void \fBshutdown\fP ()"
.br
.ti -1c
.RI "static void \fBlistObjects\fP ()"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBdeleteComponent\fP ()"
.br
.ti -1c
.RI "void \fBinitProperties\fP (\fBHandleObject\fP parent, String type)"
.br
.ti -1c
.RI "void \fBsetHandle\fP (double \fBhandle\fP)"
.br
.ti -1c
.RI "void \fBlisten\fP (\fBProperty\fP p)"
.br
.ti -1c
.RI "void \fBchildValidated\fP (\fBHandleObject\fP child)"
.br
.ti -1c
.RI "void \fBautoSet\fP (\fBProperty\fP p, Object value)"
.br
.ti -1c
.RI "boolean \fBisAutoMode\fP ()"
.br
.in -1c
.SS "Static Protected Member Functions"

.in +1c
.ti -1c
.RI "static double \fBnewHandle\fP ()"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "int \fBautoMode\fP = 0"
.br
.ti -1c
.RI "\fBPropertySet\fP \fBdefaultSet\fP = new \fBPropertySet\fP()"
.br
.in -1c
.SS "Package Attributes"

.in +1c
.ti -1c
.RI "\fBColorProperty\fP \fBBackgroundColor\fP"
.br
.ti -1c
.RI "\fBCallbackProperty\fP \fBCallback\fP"
.br
.ti -1c
.RI "\fBRadioProperty\fP \fBEnable\fP"
.br
.ti -1c
.RI "\fBVectorProperty\fP \fBExtent\fP"
.br
.ti -1c
.RI "\fBRadioProperty\fP \fBFontAngle\fP"
.br
.ti -1c
.RI "\fBStringProperty\fP \fBFontName\fP"
.br
.ti -1c
.RI "\fBDoubleProperty\fP \fBFontSize\fP"
.br
.ti -1c
.RI "\fBRadioProperty\fP \fBFontUnits\fP"
.br
.ti -1c
.RI "\fBRadioProperty\fP \fBFontWeight\fP"
.br
.ti -1c
.RI "\fBColorProperty\fP \fBForegroundColor\fP"
.br
.ti -1c
.RI "\fBRadioProperty\fP \fBHorizontalAlignment\fP"
.br
.ti -1c
.RI "\fBDoubleProperty\fP \fBListboxTop\fP"
.br
.ti -1c
.RI "\fBDoubleProperty\fP \fBMin\fP"
.br
.ti -1c
.RI "\fBDoubleProperty\fP \fBMax\fP"
.br
.ti -1c
.RI "\fBVectorProperty\fP \fBPosition\fP"
.br
.ti -1c
.RI "\fBVectorProperty\fP \fBSliderStep\fP"
.br
.ti -1c
.RI "\fBStringProperty\fP \fBUIString\fP"
.br
.ti -1c
.RI "\fBRadioProperty\fP \fBStyle\fP"
.br
.ti -1c
.RI "\fBStringProperty\fP \fBTooltipString\fP"
.br
.ti -1c
.RI "\fBRadioProperty\fP \fBUnits\fP"
.br
.ti -1c
.RI "\fBVectorProperty\fP \fBValue\fP"
.br
.ti -1c
.RI "\fBBooleanProperty\fP \fBBeingDeleted\fP"
.br
.ti -1c
.RI "\fBCallbackProperty\fP \fBButtonDownFcn\fP"
.br
.ti -1c
.RI "\fBHandleObjectListProperty\fP \fBChildren\fP"
.br
.ti -1c
.RI "\fBBooleanProperty\fP \fBClipping\fP"
.br
.ti -1c
.RI "\fBCallbackProperty\fP \fBCreateFcn\fP"
.br
.ti -1c
.RI "\fBCallbackProperty\fP \fBDeleteFcn\fP"
.br
.ti -1c
.RI "\fBRadioProperty\fP \fBHandleVisibility\fP"
.br
.ti -1c
.RI "\fBHandleObjectListProperty\fP \fBParent\fP"
.br
.ti -1c
.RI "\fBStringProperty\fP \fBTag\fP"
.br
.ti -1c
.RI "\fBStringProperty\fP \fBType\fP"
.br
.ti -1c
.RI "\fBObjectProperty\fP \fBUserData\fP"
.br
.ti -1c
.RI "\fBBooleanProperty\fP \fBVisible\fP"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBUIControlAdapter\fP \fBctrl\fP"
.br
.ti -1c
.RI "String \fBcurrentUnits\fP"
.br
.ti -1c
.RI "boolean \fBflag\fP = false"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBUIControlObject\fP (\fBHandleObject\fPparent)\fC [inline]\fP"
.PP
References UIControlObject\&.BackgroundColor, UIControlObject\&.Enable, UIControlObject\&.Extent, UIControlObject\&.FontAngle, UIControlObject\&.FontName, UIControlObject\&.FontSize, UIControlObject\&.FontUnits, UIControlObject\&.FontWeight, UIControlObject\&.ForegroundColor, UIControlObject\&.HorizontalAlignment, UIControlObject\&.ListboxTop, HandleObject\&.listen(), UIControlObject\&.Max, UIControlObject\&.Min, UIControlObject\&.Position, UIControlObject\&.SliderStep, UIControlObject\&.Style, UIControlObject\&.TooltipString, UIControlObject\&.UIString, UIControlObject\&.Units, and UIControlObject\&.Value\&.
.PP
.nf
        {
                super(parent, 'uicontrol');

                BackgroundColor = new ColorProperty(this, 'BackgroundColor');
                Callback = new CallbackProperty(this, 'Callback', (String)null);
                Enable = new RadioProperty(this, 'Enable', new String[] {'on', 'inactive', 'off'});
                Extent = new VectorProperty(this, 'Extent', 4, new double[] {0, 0, 0, 0});
                FontAngle = new RadioProperty(this, 'FontAngle', new String[] {'normal', 'italic', 'oblique'});
                FontName = new StringProperty(this, 'FontName');
                FontSize = new DoubleProperty(this, 'FontSize');
                FontUnits = new RadioProperty(this, 'FontUnits',
                        new String[] {'points', 'normalized', 'inches', 'centimeters', 'pixels'});
                FontWeight = new RadioProperty(this, 'FontWeight', new String[] {'light', 'normal', 'demi', 'bold'});
                ForegroundColor = new ColorProperty(this, 'ForegroundColor');
                HorizontalAlignment = new RadioProperty(this, 'HorizontalAlignment', new String[] {'left', 'center', 'right'});
                ListboxTop = new DoubleProperty(this, 'ListboxTop', 1);
                Min = new DoubleProperty(this, 'Min');
                Max = new DoubleProperty(this, 'Max');
                Position = new VectorProperty(this, 'Position', 4);
                UIString = new StringProperty(this, 'String');
                SliderStep = new VectorProperty(this, 'SliderStep', 2);
                Style = new RadioProperty(this, 'Style', new String[] {
                          'pushbutton',
                          'togglebutton',
                          'radiobutton',
                          'checkbox',
                          'edit',
                          'text',
                          'slider',
                          'frame',
                          'listbox',
                          'popupmenu'});
                TooltipString = new StringProperty(this, 'TooltipString');
                Units = new RadioProperty(this, 'Units', new String[] {'pixels', 'normalized', 'characters', 'inches',
                        'centimeters', 'points'});
                Value = new VectorProperty(this, 'Value', -1, new double[] {0});

                listen(FontUnits);
                listen(Style);
                listen(Units);
        }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void \fBaddChild\fP (\fBHandleObject\fPchild)\fC [inline, inherited]\fP"
.PP
References HandleObjectListProperty\&.addElement(), and HandleObject\&.Children\&.
.PP
Referenced by HandleObject\&.initProperties()\&.
.PP
.nf
        {
                synchronized (Children)
                {
                        Children\&.addElement(child);
                }
        }
.fi
.SS "void \fBaddHandleEventSink\fP (Stringname, \fBHandleEventSink\fPsink)\fC [inline, inherited]\fP"
.PP
Implements \fBHandleEventSource\fP\&.
.PP
References HandleEventSourceHelper\&.addHandleEventSink(), and HandleObject\&.eventSource\&.
.PP
Referenced by HandleObject\&.waitFor()\&.
.PP
.nf
        {
                eventSource\&.addHandleEventSink(name, sink);
        }
.fi
.SS "static void \fBaddHandleObject\fP (doublehandle, \fBHandleObject\fPobj)\fC [inline, static, inherited]\fP"
.PP
References HandleObject\&.handleMap\&.
.PP
Referenced by HandleObject\&.HandleObject(), and HandleObject\&.setHandle()\&.
.PP
.nf
        {
                handleMap\&.put(new Double(handle), new WeakReference(obj));
        }
.fi
.SS "void \fBaddProperty\fP (\fBProperty\fPp)\fC [inline, inherited]\fP"
.PP
Reimplemented from \fBPropertySet\fP\&.
.PP
References HandleObject\&.isValid(), and Property\&.unLock()\&.
.PP
.nf
        {
                super\&.addProperty(p);
                if (isValid())
                        p\&.unLock();
        }
.fi
.SS "void \fBautoSet\fP (\fBProperty\fPp, Objectvalue)\fC [inline, protected, inherited]\fP"
.PP
References HandleObject\&.autoMode, and Property\&.set()\&.
.PP
Referenced by AxesObject\&.autoAspectRatio(), AxesObject\&.autoAxis(), AxesObject\&.autoScaleC(), AxesObject\&.computeAutoTickLabels(), FigureObject\&.propertyChanged(), AxesObject\&.propertyChanged(), AxesObject\&.setInternalPosition(), PatchObject\&.updateCData(), PatchObject\&.updateFVCData(), PatchObject\&.updateFVData(), AxesObject\&.updateOuterPosition(), FigureObject\&.updatePosition(), AxesObject\&.updatePosition(), AxesObject\&.updateXFormMatrices(), and PatchObject\&.updateXYZData()\&.
.PP
.nf
        {
                autoMode++;
                p\&.set(value, true);
                autoMode--;
        }
.fi
.SS "void \fBchildValidated\fP (\fBHandleObject\fPchild)\fC [inline, protected, inherited]\fP"
.PP
Reimplemented in \fBAxesObject\fP, and \fBGroupObject\fP\&.
.PP
Referenced by HandleObject\&.validate()\&.
.PP
.nf
        {
        }
.fi
.SS "void \fBcontrolActivated\fP (\fBUIControlEvent\fPevent)\fC [inline]\fP"
.PP
References UIControlObject\&.Enable, Callback\&.execute(), HandleObject\&.getHandle(), RadioProperty\&.is(), and HandleObject\&.isValid()\&.
.PP
Referenced by PushButtonControl\&.actionPerformed(), CheckBoxControl\&.actionPerformed(), EditControl\&.actionPerformed(), PopupMenuControl\&.actionPerformed(), EditControl\&.focusLost(), Edit2Control\&.keyTyped(), and ListBoxControl\&.valueChanged()\&.
.PP
.nf
        {
                if (isValid() && Enable\&.is('on'))
                {
                        //System\&.out\&.println('Control activated');
                        Callback\&.execute(new Object[] {
                                new Double(getHandle()),
                                event});
                }
        }
.fi
.SS "void \fBdelete\fP ()\fC [inline]\fP"
.PP
Reimplemented from \fBHandleObject\fP\&.
.PP
References UIControlObject\&.deleteComponent()\&.
.PP
.nf
        {
                super\&.delete();
                deleteComponent();
        }
.fi
.SS "void \fBdeleteChildren\fP ()\fC [inline, inherited]\fP"
.PP
Reimplemented in \fBAxesObject\fP\&.
.PP
References HandleObject\&.Children, HandleObject\&.delete(), HandleObjectListProperty\&.elementAt(), HandleObjectListProperty\&.size(), StringProperty\&.toString(), and HandleObject\&.Type\&.
.PP
Referenced by HandleObject\&.delete()\&.
.PP
.nf
        {
                synchronized (Children)
                {
                        while (Children\&.size() > 0)
                        {
                                int len = Children\&.size();
                                HandleObject obj = Children\&.elementAt(0);

                                obj\&.delete();
                                if (Children\&.size() == len)
                                {
                                        System\&.out\&.println('ERROR: wrong parentship in graphic object of class `' + Type\&.toString() + '' with child of class `' + 
                                                        obj\&.Type\&.toString() + ''');
                                        break;
                                }
                        }
                }
        }
.fi
.SS "void \fBdeleteComponent\fP ()\fC [inline, protected]\fP"
.PP
References UIControlObject\&.ctrl, and UIControlAdapter\&.dispose()\&.
.PP
Referenced by UIControlObject\&.delete(), UIControlObject\&.makeControl(), and UIControlObject\&.validate()\&.
.PP
.nf
        {
                if (ctrl != null)
                {
                        ctrl\&.dispose();
                        ctrl = null;
                }
        }
.fi
.SS "void \fBdoButtonDownFcn\fP (MouseEvente)\fC [inline, inherited]\fP"
.PP
References HandleObject\&.ButtonDownFcn, CallbackProperty\&.execute(), HandleObject\&.getAncestor(), HandleObject\&.getHandle(), and CallbackProperty\&.unwind()\&.
.PP
Referenced by UIControlAdapter\&.mousePressed(), and AxesContainer\&.mousePressed()\&.
.PP
.nf
        {
                String selType = 'normal';

                switch (e\&.getButton())
                {
                        case MouseEvent\&.BUTTON2:
                                selType = 'extend';
                                break;
                        case MouseEvent\&.BUTTON3:
                                selType = 'alt';
                                break;
                }

                switch (e\&.getModifiers() & (MouseEvent\&.SHIFT_MASK|MouseEvent\&.CTRL_MASK))
                {
                        case MouseEvent\&.CTRL_MASK:
                                selType = 'alt';
                                break;
                        case MouseEvent\&.SHIFT_MASK:
                                selType = 'extend';
                                break;
                        case 0:
                                if (e\&.getClickCount() == 2)
                                        selType = 'open';
                                break;
                }

                ButtonDownFcn\&.unwind(((FigureObject)getAncestor('figure'))\&.SelectionType, selType);
                ButtonDownFcn\&.execute(new Object[] {
                        new Double(getHandle()),
                        null});
        }
.fi
.SS "void \fBeventOccured\fP (\fBHandleEvent\fPevt)  throws \fBPropertyException\fP 	\fC [inline, inherited]\fP"
.PP
Implements \fBHandleEventSink\fP\&.
.PP
References HandleObject\&.propertyChanged()\&.
.PP
Referenced by HandleObject\&.waitFor()\&.
.PP
.nf
        {
                if (evt\&.getName()\&.equals('PropertyChanged'))
                        propertyChanged(evt\&.getProperty());
        }
.fi
.SS "boolean \fBexecuteOnce\fP ()\fC [inline, inherited]\fP"
.PP
Implements \fBHandleEventSink\fP\&.
.PP
Referenced by HandleObject\&.waitFor()\&.
.PP
.nf
        {
                return false;
        }
.fi
.SS "Object \fBget\fP (\fBProperty\fPp)\fC [inline]\fP"
.PP
Reimplemented from \fBPropertySet\fP\&.
.PP
References UIControlObject\&.ctrl, RadioProperty\&.is(), UIControlObject\&.Style, StringProperty\&.toString(), UIControlObject\&.UIString, and UIControlAdapter\&.update()\&.
.PP
.nf
        {
                if (ctrl != null)
                        ctrl\&.update();

                if (p == UIString && (Style\&.is('listbox') || Style\&.is('popupmenu')))
                        return UIString\&.toString()\&.split('\\|');
                else
                        return super\&.get(p);
        }
.fi
.SS "Object \fBget\fP (Stringname)  throws \fBPropertyException\fP 	\fC [inline, inherited]\fP"
.PP
Reimplemented from \fBPropertySet\fP\&.
.PP
References Property\&.get(), and HandleObject\&.getDefaultProperty()\&.
.PP
Referenced by AxesObject\&.autoScaleC(), and LegendObject\&.makeItemFromLine()\&.
.PP
.nf
        {
                if (name\&.toLowerCase()\&.startsWith('default'))
                {
                        Property p = getDefaultProperty(name);
                        if (p != null)
                                return p\&.get();
                        throw new PropertyException('invalid default property - ' + name\&.toLowerCase());
                }
                else
                        return super\&.get(name);
        }
.fi
.SS "\fBHandleObject\fP \fBgetAncestor\fP (Stringtype)\fC [inline, inherited]\fP"
.PP
References HandleObjectListProperty\&.elementAt(), HandleObject\&.Parent, HandleObjectListProperty\&.size(), StringProperty\&.toString(), and HandleObject\&.Type\&.
.PP
Referenced by AxesContainer\&.createCanvas(), HandleObject\&.doButtonDownFcn(), AxesContainer\&.getDefaultMouseOp(), AxesObject\&.getFigure(), and GraphicObject\&.set()\&.
.PP
.nf
        {
                HandleObject curr = this;

                while (true)
                {
                        if (curr\&.Type\&.toString()\&.equalsIgnoreCase(type))
                                return curr;
                        else if (curr\&.Parent\&.size() <= 0)
                                return null;
                        else
                                curr = curr\&.Parent\&.elementAt(0);
                }
        }
.fi
.SS "Rectangle \fBgetBounds\fP ()\fC [inline]\fP"
.PP
References UIControlObject\&.ctrl\&.
.PP
.nf
        {
                return (ctrl != null ? ctrl\&.getBounds() : new Rectangle());
        }
.fi
.SS "Renderer\&.CachedData \fBgetCachedData\fP ()\fC [inline, inherited]\fP"
.PP
References HandleObject\&.cachedData\&.
.PP
Referenced by GLRenderer\&.draw()\&.
.PP
.nf
        {
                return cachedData;
        }
.fi
.SS "Component \fBgetComponent\fP ()\fC [inline]\fP"
.PP
Reimplemented from \fBHandleObject\fP\&.
.PP
References UIControlObject\&.ctrl, and UIControlAdapter\&.getComponent()\&.
.PP
.nf
        {
                if (ctrl != null)
                        return ctrl\&.getComponent();
                else
                        return null;
        }
.fi
.SS "\fBProperty\fP \fBgetDefaultProperty\fP (Stringname)\fC [inline, inherited]\fP"
.PP
References HandleObject\&.defaultSet, HandleObjectListProperty\&.elementAt(), Factory\&.getDefaultProperty(), HandleObject\&.getDefaultProperty(), PropertySet\&.getProperty(), HandleObject\&.Parent, and HandleObjectListProperty\&.size()\&.
.PP
Referenced by HandleObject\&.get(), HandleObject\&.getDefaultProperty(), Property\&.initDefault(), and HandleObject\&.set()\&.
.PP
.nf
        {
                Property p = defaultSet\&.getProperty(name);
                if (p != null)
                        return p;
                else if (Parent\&.size() > 0)
                        return Parent\&.elementAt(0)\&.getDefaultProperty(name);
                else
                        return Factory\&.getDefaultProperty(name);
        }
.fi
.SS "double \fBgetHandle\fP ()\fC [inline, inherited]\fP"
.PP
References HandleObject\&.handle\&.
.PP
Referenced by UIPanelObject\&.componentResized(), FigureObject\&.componentResized(), UIControlObject\&.controlActivated(), HandleObject\&.delete(), HandleObject\&.doButtonDownFcn(), OctaveSink\&.doInvoke(), RootObject\&.findFigure(), HandleObjectListProperty\&.getHandleArray(), HandleObject\&.HandleObject(), AxesObject\&.reset(), HandleObject\&.setHandle(), HandleObjectListProperty\&.toString(), FigureObject\&.updateHandle(), FigureObject\&.updateTitle(), HandleObject\&.validate(), and FigureObject\&.windowClosing()\&.
.PP
.nf
        {
                return handle;
        }
.fi
.SS "static \fBHandleObject\fP \fBgetHandleObject\fP (doublehandle)  throws \fBException\fP 	\fC [inline, static, inherited]\fP"
.PP
References RootObject\&.getInstance(), HandleObject\&.handle, and HandleObject\&.handleMap\&.
.PP
Referenced by TextProperty\&.convertValue(), HandleObjectListProperty\&.convertValue(), and RootObject\&.createNewFigure()\&.
.PP
.nf
        {
                WeakReference ref = (WeakReference)handleMap\&.get(new Double(handle));
                if (ref != null && ref\&.get() != null)
                {
                        return (HandleObject)ref\&.get();
                }
                if (handle == 0)
                        return RootObject\&.getInstance();
                throw new Exception('invalid handle - ' + handle);
        }
.fi
.SS "String [] \fBgetNames\fP ()\fC [inline, inherited]\fP"
.PP
References Property\&.getName(), and Property\&.isVisible()\&.
.PP
.nf
        {
                List names = new ArrayList();
                Iterator it = values()\&.iterator();
                while (it\&.hasNext())
                {
                        Property p = (Property)it\&.next();
                        if (p\&.isVisible())
                                names\&.add(p\&.getName());
                }
                return (String[])names\&.toArray(new String[names\&.size()]);
        }
.fi
.SS "Component \fBgetParentComponent\fP ()\fC [inline]\fP"
.PP
References HandleObjectListProperty\&.elementAt(), HandleObject\&.getComponent(), HandleObject\&.Parent, and HandleObjectListProperty\&.size()\&.
.PP
Referenced by UIControlObject\&.getPosition(), UIControlObject\&.makeControl(), and UIControlObject\&.propertyChanged()\&.
.PP
.nf
        {
                if (Parent\&.size() > 0)
                {
                        HandleObject obj = Parent\&.elementAt(0);
                        return obj\&.getComponent();
                }
                else
                        return null;
        }
.fi
.SS "double [] \fBgetPosition\fP ()\fC [inline]\fP"
.PP
References Utils\&.convertPosition(), VectorProperty\&.getArray(), UIControlObject\&.getParentComponent(), RadioProperty\&.getValue(), UIControlObject\&.Position, and UIControlObject\&.Units\&.
.PP
Referenced by UIControlAdapter\&.getPosition(), and UIControlAdapter\&.init()\&.
.PP
.nf
        {
                Component pComp = getParentComponent();
                if (pComp != null)
                        return Utils\&.convertPosition(Position\&.getArray(), Units\&.getValue(), 'pixels', pComp);
                else
                {
                        System\&.out\&.println('Warning: cannot compute position of parentless controls');
                        return new double[] {0, 0, 0, 0};
                }
        }
.fi
.SS "\fBProperty\fP \fBgetProperty\fP (Stringname)\fC [inline, inherited]\fP"
.PP
Referenced by AxesObject\&.childValidated(), AxesObject\&.draw(), PropertySet\&.get(), AxesObject\&.getChildrenLimits(), HandleObject\&.getDefaultProperty(), OctaveSink\&.OctaveSink(), PropertySet\&.set(), and HandleObject\&.waitFor()\&.
.PP
.nf
        {
                return (Property)get((Object)name\&.toLowerCase());
        }
.fi
.SS "String \fBgetType\fP ()\fC [inline, inherited]\fP"
.PP
References StringProperty\&.toString(), and HandleObject\&.Type\&.
.PP
Referenced by Property\&.initDefault()\&.
.PP
.nf
        {
                return (Type != null ? Type\&.toString() : '');
        }
.fi
.SS "boolean \fBhasHandleEvent\fP (Stringname)\fC [inline, inherited]\fP"
.PP
Implements \fBHandleEventSource\fP\&.
.PP
References HandleObject\&.eventSource, and HandleEventSourceHelper\&.hasHandleEvent()\&.
.PP
Referenced by OctaveSink\&.OctaveSink()\&.
.PP
.nf
        {
                return eventSource\&.hasHandleEvent(name);
        }
.fi
.SS "boolean \fBhasProperty\fP (Stringname)\fC [inline, inherited]\fP"
.PP
Referenced by AxesObject\&.draw()\&.
.PP
.nf
        {
                return containsKey(name\&.toLowerCase());
        }
.fi
.SS "void \fBinitProperties\fP (\fBHandleObject\fPparent, Stringtype)\fC [inline, protected, inherited]\fP"
.PP
References HandleObject\&.addChild(), HandleObjectListProperty\&.addElement(), HandleObject\&.BeingDeleted, HandleObject\&.ButtonDownFcn, HandleObject\&.Children, HandleObject\&.Clipping, HandleObject\&.CreateFcn, HandleObject\&.DeleteFcn, HandleObject\&.HandleVisibility, HandleObject\&.Parent, HandleObject\&.Tag, HandleObject\&.Type, HandleObject\&.UserData, and HandleObject\&.Visible\&.
.PP
Referenced by HandleObject\&.HandleObject()\&.
.PP
.nf
        {
                // These properties must be created first, in order to
                // get correct behavior when looking for default values
                // of properties
                Type = new StringProperty(this, 'Type', type);
                Parent = new HandleObjectListProperty(this, 'Parent', -1);
                if (parent != null)
                        Parent\&.addElement(parent);

                // Create other properties
                BeingDeleted = new BooleanProperty(this, 'BeingDeleted', false);
                ButtonDownFcn = new CallbackProperty(this, 'ButtonDownFcn', (String)null);
                Children = new HandleObjectListProperty(this, 'Children', -1);
                Clipping = new BooleanProperty(this, 'Clipping', true);
                CreateFcn = new CallbackProperty(this, 'CreateFcn', (String)null);
                DeleteFcn = new CallbackProperty(this, 'DeleteFcn', (String)null);
                HandleVisibility = new RadioProperty(this, 'HandleVisibility', new String[] {'on', 'callback', 'off'}, 'on');
                Tag = new StringProperty(this, 'Tag', '');
                UserData = new ObjectProperty(this, 'UserData', null);
                Visible = new BooleanProperty(this, 'Visible', true);

                // TODO: move this to validate() ??
                if (parent != null)
                        parent\&.addChild(this);
        }
.fi
.SS "boolean \fBisAutoMode\fP ()\fC [inline, protected, inherited]\fP"
.PP
References HandleObject\&.autoMode\&.
.PP
Referenced by ColorbarObject\&.propertyChanged(), FigureObject\&.propertyChanged(), LegendObject\&.propertyChanged(), and PatchObject\&.propertyChanged()\&.
.PP
.nf
        {
                return (autoMode > 0);
        }
.fi
.SS "static boolean \fBisHandle\fP (doublehandle)\fC [inline, static, inherited]\fP"
.PP
References HandleObject\&.handleMap\&.
.PP
Referenced by TextProperty\&.convertValue(), RootObject\&.createNewFigure(), and RootObject\&.getUnusedFigureNumber()\&.
.PP
.nf
        {
                WeakReference ref = (WeakReference)handleMap\&.get(new Double(handle));
                if (ref != null && ref\&.get() != null)
                        return true;
                return false;
        }
.fi
.SS "boolean \fBisLegendable\fP ()\fC [inline, inherited]\fP"
.PP
Reimplemented in \fBGraphicObject\fP, and \fBBaseLineObject\fP\&.
.PP
Referenced by AxesObject\&.autoLegend(), and LegendObject\&.buildLegend()\&.
.PP
.nf
        {
                return false;
        }
.fi
.SS "boolean \fBisValid\fP ()\fC [inline, inherited]\fP"
.PP
References HandleObject\&.valid\&.
.PP
Referenced by HandleObject\&.addProperty(), AxesObject\&.childValidated(), UIControlObject\&.controlActivated(), AxesContainer\&.display(), AxesContainer\&.getObjectForPoint(), and AxesContainer\&.reshape()\&.
.PP
.nf
        {
                return valid;
        }
.fi
.SS "void \fBlisten\fP (\fBProperty\fPp)\fC [inline, protected, inherited]\fP"
.PP
References Property\&.addHandleEventSink(), HandleObject\&.eventSourceSet, and Property\&.getParent()\&.
.PP
Referenced by AxesObject\&.AxesObject(), BarseriesObject\&.BarseriesObject(), BaseLineObject\&.BaseLineObject(), GroupObject\&.childValidated(), AxesObject\&.childValidated(), ColorbarObject\&.ColorbarObject(), FigureObject\&.FigureObject(), ImageObject\&.ImageObject(), LegendObject\&.LegendObject(), LineObject\&.LineObject(), PatchObject\&.PatchObject(), RootObject\&.RootObject(), SurfaceObject\&.SurfaceObject(), TextObject\&.TextObject(), UIControlObject\&.UIControlObject(), and UIPanelObject\&.UIPanelObject()\&.
.PP
.nf
        {
                p\&.addHandleEventSink('PropertyChanged', this);
                if (p\&.getParent() != this)
                        eventSourceSet\&.add(p);
        }
.fi
.SS "static void \fBlistObjects\fP ()\fC [inline, static, inherited]\fP"
.PP
References HandleObject\&.handleMap, and HandleObject\&.HandleObject()\&.
.PP
.nf
        {
                Iterator it = handleMap\&.entrySet()\&.iterator();
                while (it\&.hasNext())
                {
                        Map\&.Entry entry = (Map\&.Entry)it\&.next();
                        HandleObject hObj = (HandleObject)((WeakReference)entry\&.getValue())\&.get();
                        System\&.out\&.println(entry\&.getKey() + ' = ' + hObj\&.getClass());
                }
        }
.fi
.SS "\fBUIControlAdapter\fP \fBmakeControl\fP ()\fC [inline]\fP"
.PP
References UIControlObject\&.ctrl, UIControlObject\&.deleteComponent(), and UIControlObject\&.getParentComponent()\&.
.PP
Referenced by UIControlObject\&.validate()\&.
.PP
.nf
        {
                deleteComponent();

                try { ctrl = new UIControlAdapter(this); }
                catch (Exception e)
                {
                        System\&.out\&.println('Warning: unable to create UI control');
                        e\&.printStackTrace();
                        return null;
                }

                Container pContainer = (Container)getParentComponent();

                pContainer\&.add(ctrl, 0);
                pContainer\&.validate();

                return ctrl;
        }
.fi
.SS "static double \fBnewHandle\fP ()\fC [inline, static, protected, inherited]\fP"
.PP
References HandleObject\&.handleSeed\&.
.PP
Referenced by HandleObject\&.HandleObject(), UIPanelObject\&.UIPanelObject(), and FigureObject\&.updateHandle()\&.
.PP
.nf
        {
                double h = handleSeed;
                handleSeed = Math\&.ceil(handleSeed) - 1 - Math\&.random();
                return h;
        }
.fi
.SS "void \fBpropertyChanged\fP (\fBProperty\fPp)  throws \fBPropertyException\fP 	\fC [inline]\fP"
.PP
Reimplemented from \fBHandleObject\fP\&.
.PP
References Utils\&.convertPosition(), UIControlObject\&.ctrl, UIControlObject\&.currentUnits, UIControlObject\&.FontUnits, VectorProperty\&.getArray(), UIControlObject\&.getParentComponent(), RadioProperty\&.getValue(), UIControlObject\&.Position, Property\&.set(), UIControlObject\&.Style, and UIControlObject\&.Units\&.
.PP
.nf
        {
                super\&.propertyChanged(p);

                if (p == Style)
                {
                }
                else if (ctrl != null)
                {
                        if (p == Units)
                        {
                                double[] pos = Utils\&.convertPosition(Position\&.getArray(), currentUnits, Units\&.getValue(), getParentComponent());
                                Position\&.set(pos, true);
                                currentUnits = Units\&.getValue();
                        }
                        else if (p == FontUnits)
                        {
                        }
                        
                }
        }
.fi
.SS "void \fBremoveChild\fP (\fBHandleObject\fPchild)\fC [inline, inherited]\fP"
.PP
Reimplemented in \fBAxesObject\fP, \fBFigureObject\fP, \fBGroupObject\fP, and \fBRootObject\fP\&.
.PP
References HandleObject\&.Children, and HandleObjectListProperty\&.removeElement()\&.
.PP
Referenced by HandleObject\&.delete()\&.
.PP
.nf
        {
                synchronized (Children)
                {
                        Children\&.removeElement(child);
                }
        }
.fi
.SS "void \fBremoveHandleEventSink\fP (\fBHandleEventSink\fPsink)\fC [inline, inherited]\fP"
.PP
Implements \fBHandleEventSource\fP\&.
.PP
References HandleObject\&.eventSource, and HandleEventSourceHelper\&.removeHandleEventSink()\&.
.PP
Referenced by HandleObject\&.delete()\&.
.PP
.nf
        {
                eventSource\&.removeHandleEventSink(sink);
        }
.fi
.SS "static void \fBremoveHandleObject\fP (doublehandle)\fC [inline, static, inherited]\fP"
.PP
References HandleObject\&.handleMap\&.
.PP
Referenced by HandleObject\&.delete(), and HandleObject\&.setHandle()\&.
.PP
.nf
        {
                handleMap\&.remove(new Double(handle));
        }
.fi
.SS "void \fBset\fP (\fBProperty\fPp, Objectvalue)  throws \fBPropertyException\fP 	\fC [inline]\fP"
.PP
Reimplemented from \fBPropertySet\fP\&.
.PP
References UIControlObject\&.ctrl, DoubleProperty\&.doubleValue(), RadioProperty\&.is(), Utils\&.join(), UIControlObject\&.Max, UIControlObject\&.Min, UIControlObject\&.Style, UIControlObject\&.UIString, and UIControlAdapter\&.update()\&.
.PP
.nf
        {
                if (ctrl != null)
                        ctrl\&.update();

                if (p == UIString && value != null)
                {
                        try
                        {
                                String[] items = (String[])value;
                                if (Style\&.is('listbox') || Style\&.is('popupmenu'))
                                        value = Utils\&.join(items, '|');
                                else if (Style\&.is('text') || (Style\&.is('edit') && (Max\&.doubleValue()-Min\&.doubleValue()) > 1))
                                        value = Utils\&.join(items, '\n');
                                else
                                        value = (items\&.length > 0 ? items[0] : '');
                        }
                        catch (ClassCastException e) {}
                }
                super\&.set(p, value);
        }
.fi
.SS "void \fBset\fP (Stringname, Objectvalue)  throws \fBPropertyException\fP 	\fC [inline, inherited]\fP"
.PP
Reimplemented from \fBPropertySet\fP\&.
.PP
References PropertySet\&.addProperty(), Property\&.cloneProperty(), HandleObject\&.defaultSet, HandleObject\&.getDefaultProperty(), and Property\&.set()\&.
.PP
.nf
        {
                if (name\&.toLowerCase()\&.startsWith('default'))
                {
                        Property p = getDefaultProperty(name);
                        if (p != null)
                        {
                                Property new_p = p\&.cloneProperty();
                                new_p\&.set(value);
                                defaultSet\&.addProperty(new_p);
                        }
                        else
                                throw new PropertyException('invalid default property - ' + name\&.toLowerCase());
                }
                else
                        super\&.set(name, value);
        }
.fi
.SS "void \fBsetCachedData\fP (Renderer\&.CachedDatad)\fC [inline, inherited]\fP"
.PP
References HandleObject\&.cachedData\&.
.PP
Referenced by GLRenderer\&.draw(), and SurfaceObject\&.propertyChanged()\&.
.PP
.nf
        {
                if (cachedData != null)
                        cachedData\&.dispose();
                cachedData = d;
        }
.fi
.SS "void \fBsetHandle\fP (doublehandle)\fC [inline, protected, inherited]\fP"
.PP
References HandleObject\&.addHandleObject(), HandleObject\&.getHandle(), HandleObject\&.handle, and HandleObject\&.removeHandleObject()\&.
.PP
Referenced by FigureObject\&.updateHandle()\&.
.PP
.nf
        {
                removeHandleObject(getHandle());
                this\&.handle = handle;
                addHandleObject(getHandle(), this);
        }
.fi
.SS "void \fBshow\fP ()\fC [inline, inherited]\fP"
.PP
References Property\&.getName(), and Property\&.isVisible()\&.
.PP
.nf
        {
                Iterator it = values()\&.iterator();
                while (it\&.hasNext())
                {
                        Property p = (Property)it\&.next();
                        if (p\&.isVisible())
                        {
                                get(p); /* force any getter to execute */
                                System\&.out\&.println('  ' + p\&.getName() + ' = ' + p);
                        }
                }
        }
.fi
.SS "static void \fBshutdown\fP ()\fC [inline, static, inherited]\fP"
.PP
References HandleObject\&.handleMap\&.
.PP
.nf
        {
                LinkedList figList = new LinkedList();
                Iterator it = handleMap\&.values()\&.iterator();

                while (it\&.hasNext())
                {
                        WeakReference ref = (WeakReference)it\&.next();
                        if (ref != null && ref\&.get() != null && ref\&.get() instanceof FigureObject)
                                figList\&.add(ref\&.get());
                }

                it = figList\&.iterator();
                while (it\&.hasNext())
                        ((HandleObject)it\&.next())\&.delete();
        }
.fi
.SS "void \fBsourceDeleted\fP (Objectsource)\fC [inline, inherited]\fP"
.PP
Implements \fBHandleEventSink\fP\&.
.PP
References HandleObject\&.eventSourceSet\&.
.PP
Referenced by HandleObject\&.waitFor()\&.
.PP
.nf
        {
                eventSourceSet\&.remove(source);
        }
.fi
.SS "void \fBvalidate\fP ()\fC [inline]\fP"
.PP
Reimplemented from \fBHandleObject\fP\&.
.PP
References UIControlObject\&.ctrl, UIControlObject\&.currentUnits, UIControlObject\&.deleteComponent(), RadioProperty\&.getValue(), UIControlObject\&.makeControl(), and UIControlObject\&.Units\&.
.PP
.nf
        {
                deleteComponent();
                currentUnits = Units\&.getValue();
                ctrl = makeControl();
                super\&.validate();
        }
.fi
.SS "void \fBwaitFor\fP ()\fC [inline, inherited]\fP"
.PP
Referenced by HandleObject\&.waitFor()\&.
.PP
.nf
        {
                waitFor(null, null, false);
        }
.fi
.SS "void \fBwaitFor\fP (Stringpname)\fC [inline, inherited]\fP"
.PP
References HandleObject\&.waitFor()\&.
.PP
.nf
        {
                waitFor(pname, null, false);
        }
.fi
.SS "void \fBwaitFor\fP (Stringpname, Objectvalue)\fC [inline, inherited]\fP"
.PP
References HandleObject\&.waitFor()\&.
.PP
.nf
        {
                waitFor(pname, value, true);
        }
.fi
.SH "Member Data Documentation"
.PP 
.SS "int \fBautoMode\fP = 0\fC [protected, inherited]\fP"
.PP
Referenced by HandleObject\&.autoSet(), ColorbarObject\&.doLocate(), LegendObject\&.doLocate(), AxesObject\&.doZoom(), AxesObject\&.draw(), HandleObject\&.isAutoMode(), ColorbarObject\&.propertyChanged(), LegendObject\&.propertyChanged(), AxesObject\&.propertyChanged(), and AxesObject\&.unZoom()\&.
.SS "\fBColorProperty\fP \fBBackgroundColor\fP\fC [package]\fP"
.PP
Referenced by Edit2Control\&.Edit2Control(), UIControlAdapter\&.init(), ListBoxControl\&.ListBoxControl(), Edit2Control\&.propertyChanged(), UIControlAdapter\&.propertyChanged(), ListBoxControl\&.propertyChanged(), UIControlObject\&.UIControlObject(), and ListBoxControl\&.updateColors()\&.
.SS "\fBBooleanProperty\fP \fBBeingDeleted\fP\fC [package, inherited]\fP"
.PP
Referenced by HandleObject\&.delete(), HandleObject\&.initProperties(), and AxesObject\&.removeChild()\&.
.SS "\fBCallbackProperty\fP \fBButtonDownFcn\fP\fC [package, inherited]\fP"
.PP
Referenced by HandleObject\&.doButtonDownFcn(), and HandleObject\&.initProperties()\&.
.SS "\fBCallbackProperty\fP \fBCallback\fP\fC [package]\fP"
.SS "\fBHandleObjectListProperty\fP \fBChildren\fP\fC [package, inherited]\fP"
.PP
Referenced by HandleObject\&.addChild(), AxesObject\&.autoLegend(), AxesObject\&.autoScaleC(), LegendObject\&.buildLegend(), HandleObject\&.deleteChildren(), AxesContainer\&.display(), ColorbarObject\&.doClear(), LegendObject\&.doClear(), GroupObject\&.draw(), AxesObject\&.draw(), RootObject\&.findFigure(), AxesObject\&.getChildrenLimits(), AxesContainer\&.getObjectForPoint(), BarseriesObject\&.getPatch(), HandleObject\&.initProperties(), RootObject\&.removeChild(), HandleObject\&.removeChild(), AxesContainer\&.reshape(), ColorbarObject\&.updateImageFromColormap(), GroupObject\&.updateLimits(), GroupObject\&.validate(), and HandleObject\&.validate()\&.
.SS "\fBBooleanProperty\fP \fBClipping\fP\fC [package, inherited]\fP"
.PP
Referenced by GLRenderer\&.draw(), AxesObject\&.draw(), HandleObject\&.initProperties(), and TextObject\&.TextObject()\&.
.SS "\fBCallbackProperty\fP \fBCreateFcn\fP\fC [package, inherited]\fP"
.PP
Referenced by HandleObject\&.initProperties(), and HandleObject\&.validate()\&.
.SS "\fBUIControlAdapter\fP \fBctrl\fP\fC [private]\fP"
.PP
Referenced by UIControlObject\&.deleteComponent(), UIControlObject\&.get(), UIControlObject\&.getBounds(), UIControlObject\&.getComponent(), UIControlObject\&.makeControl(), UIControlObject\&.propertyChanged(), UIControlObject\&.set(), and UIControlObject\&.validate()\&.
.SS "String \fBcurrentUnits\fP\fC [private]\fP"
.PP
Referenced by UIControlObject\&.propertyChanged(), and UIControlObject\&.validate()\&.
.SS "\fBPropertySet\fP \fBdefaultSet\fP = new \fBPropertySet\fP()\fC [protected, inherited]\fP"
.PP
Referenced by HandleObject\&.getDefaultProperty(), and HandleObject\&.set()\&.
.SS "\fBCallbackProperty\fP \fBDeleteFcn\fP\fC [package, inherited]\fP"
.PP
Referenced by HandleObject\&.delete(), and HandleObject\&.initProperties()\&.
.SS "\fBRadioProperty\fP \fBEnable\fP\fC [package]\fP"
.PP
Referenced by UIControlObject\&.controlActivated(), UIControlAdapter\&.init(), UIControlAdapter\&.mousePressed(), UIControlAdapter\&.propertyChanged(), and UIControlObject\&.UIControlObject()\&.
.SS "\fBVectorProperty\fP \fBExtent\fP\fC [package]\fP"
.PP
Referenced by UIControlObject\&.UIControlObject()\&.
.SS "boolean \fBflag\fP = false\fC [private]\fP"
.SS "\fBRadioProperty\fP \fBFontAngle\fP\fC [package]\fP"
.PP
Referenced by UIControlAdapter\&.init(), UIControlAdapter\&.propertyChanged(), and UIControlObject\&.UIControlObject()\&.
.SS "\fBStringProperty\fP \fBFontName\fP\fC [package]\fP"
.PP
Referenced by UIControlAdapter\&.init(), UIControlAdapter\&.propertyChanged(), and UIControlObject\&.UIControlObject()\&.
.SS "\fBDoubleProperty\fP \fBFontSize\fP\fC [package]\fP"
.PP
Referenced by UIControlAdapter\&.init(), UIControlAdapter\&.propertyChanged(), and UIControlObject\&.UIControlObject()\&.
.SS "\fBRadioProperty\fP \fBFontUnits\fP\fC [package]\fP"
.PP
Referenced by UIControlAdapter\&.init(), UIControlAdapter\&.propertyChanged(), UIControlObject\&.propertyChanged(), and UIControlObject\&.UIControlObject()\&.
.SS "\fBRadioProperty\fP \fBFontWeight\fP\fC [package]\fP"
.PP
Referenced by UIControlAdapter\&.init(), UIControlAdapter\&.propertyChanged(), and UIControlObject\&.UIControlObject()\&.
.SS "\fBColorProperty\fP \fBForegroundColor\fP\fC [package]\fP"
.PP
Referenced by Edit2Control\&.Edit2Control(), UIControlAdapter\&.init(), ListBoxControl\&.ListBoxControl(), Edit2Control\&.propertyChanged(), UIControlAdapter\&.propertyChanged(), ListBoxControl\&.propertyChanged(), UIControlObject\&.UIControlObject(), and ListBoxControl\&.updateColors()\&.
.SS "\fBRadioProperty\fP \fBHandleVisibility\fP\fC [package, inherited]\fP"
.PP
Referenced by HandleObjectListProperty\&.getVisibleObjects(), HandleObject\&.initProperties(), and AxesObject\&.makeTextObject()\&.
.SS "\fBRadioProperty\fP \fBHorizontalAlignment\fP\fC [package]\fP"
.PP
Referenced by Edit2Control\&.Edit2Control(), EditControl\&.EditControl(), TextControl\&.getAlignment(), EditControl\&.propertyChanged(), Edit2Control\&.propertyChanged(), TextControl\&.propertyChanged(), Edit2Control\&.setAlignment(), EditControl\&.setAlignment(), TextControl\&.stringToHTML(), TextControl\&.TextControl(), and UIControlObject\&.UIControlObject()\&.
.SS "\fBDoubleProperty\fP \fBListboxTop\fP\fC [package]\fP"
.PP
Referenced by ListBoxControl\&.ListBoxControl(), ListBoxControl\&.propertyChanged(), UIControlObject\&.UIControlObject(), ListBoxControl\&.update(), and ListBoxControl\&.updateTop()\&.
.SS "\fBDoubleProperty\fP \fBMax\fP\fC [package]\fP"
.PP
Referenced by ListBoxControl\&.ListBoxControl(), CheckBoxControl\&.propertyChanged(), ListBoxControl\&.propertyChanged(), UIControlObject\&.set(), UIControlObject\&.UIControlObject(), CheckBoxControl\&.update(), and ListBoxControl\&.updateSelectionMode()\&.
.SS "\fBDoubleProperty\fP \fBMin\fP\fC [package]\fP"
.PP
Referenced by ListBoxControl\&.ListBoxControl(), ListBoxControl\&.propertyChanged(), UIControlObject\&.set(), UIControlObject\&.UIControlObject(), CheckBoxControl\&.update(), and ListBoxControl\&.updateSelectionMode()\&.
.SS "\fBHandleObjectListProperty\fP \fBParent\fP\fC [package, inherited]\fP"
.PP
Referenced by HandleObject\&.delete(), HandleObject\&.getAncestor(), GraphicObject\&.getAxes(), AxesObject\&.getAxesContainer(), AxesObject\&.getCanvas(), HandleObject\&.getDefaultProperty(), UIControlObject\&.getParentComponent(), UIPanelObject\&.getParentComponent(), HandleObject\&.initProperties(), LegendObject\&.LegendObject(), and HandleObject\&.validate()\&.
.SS "\fBVectorProperty\fP \fBPosition\fP\fC [package]\fP"
.PP
Referenced by UIControlObject\&.getPosition(), UIControlAdapter\&.propertyChanged(), UIControlObject\&.propertyChanged(), and UIControlObject\&.UIControlObject()\&.
.SS "\fBVectorProperty\fP \fBSliderStep\fP\fC [package]\fP"
.PP
Referenced by UIControlObject\&.UIControlObject()\&.
.SS "\fBRadioProperty\fP \fBStyle\fP\fC [package]\fP"
.PP
Referenced by UIControlObject\&.get(), UIControlObject\&.propertyChanged(), UIControlObject\&.set(), and UIControlObject\&.UIControlObject()\&.
.SS "\fBStringProperty\fP \fBTag\fP\fC [package, inherited]\fP"
.PP
Referenced by ColorbarObject\&.ColorbarObject(), HandleObject\&.initProperties(), and LegendObject\&.LegendObject()\&.
.SS "\fBStringProperty\fP \fBTooltipString\fP\fC [package]\fP"
.PP
Referenced by UIControlAdapter\&.init(), UIControlAdapter\&.propertyChanged(), and UIControlObject\&.UIControlObject()\&.
.SS "\fBStringProperty\fP \fBType\fP\fC [package, inherited]\fP"
.PP
Referenced by HandleObject\&.deleteChildren(), HandleObject\&.getAncestor(), HandleObject\&.getType(), HandleObject\&.initProperties(), and OctaveSink\&.OctaveSink()\&.
.SS "\fBStringProperty\fP \fBUIString\fP\fC [package]\fP"
.PP
Referenced by CheckBoxControl\&.CheckBoxControl(), Edit2Control\&.Edit2Control(), EditControl\&.EditControl(), UIControlObject\&.get(), ListBoxControl\&.ListBoxControl(), PopupMenuControl\&.PopupMenuControl(), CheckBoxControl\&.propertyChanged(), PushButtonControl\&.propertyChanged(), EditControl\&.propertyChanged(), PopupMenuControl\&.propertyChanged(), Edit2Control\&.propertyChanged(), TextControl\&.propertyChanged(), ListBoxControl\&.propertyChanged(), PushButtonControl\&.PushButtonControl(), UIControlObject\&.set(), TextControl\&.TextControl(), UIControlObject\&.UIControlObject(), EditControl\&.update(), Edit2Control\&.update(), PopupMenuControl\&.updateItems(), and ListBoxControl\&.updateItems()\&.
.SS "\fBRadioProperty\fP \fBUnits\fP\fC [package]\fP"
.PP
Referenced by UIControlObject\&.getPosition(), UIControlObject\&.propertyChanged(), UIControlObject\&.UIControlObject(), and UIControlObject\&.validate()\&.
.SS "\fBObjectProperty\fP \fBUserData\fP\fC [package, inherited]\fP"
.PP
Referenced by HandleObject\&.initProperties()\&.
.SS "\fBVectorProperty\fP \fBValue\fP\fC [package]\fP"
.PP
Referenced by CheckBoxControl\&.CheckBoxControl(), ListBoxControl\&.ListBoxControl(), PopupMenuControl\&.PopupMenuControl(), CheckBoxControl\&.propertyChanged(), PopupMenuControl\&.propertyChanged(), ListBoxControl\&.propertyChanged(), UIControlObject\&.UIControlObject(), CheckBoxControl\&.update(), PopupMenuControl\&.update(), ListBoxControl\&.update(), PopupMenuControl\&.updateValue(), and ListBoxControl\&.updateValue()\&.
.SS "\fBBooleanProperty\fP \fBVisible\fP\fC [package, inherited]\fP"
.PP
Referenced by AxesObject\&.childValidated(), FigureObject\&.createFigure(), AxesObject\&.draw(), FigureObject\&.FigureObject(), AxesObject\&.getChildrenLimits(), HandleObject\&.initProperties(), FigureObject\&.propertyChanged(), and AxesObject\&.reset()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Octave from the source code\&.
