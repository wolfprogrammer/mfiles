cd : Muda de diretório
clear: 		Exclui variável
clear all       Exclui todas variáveis
clc: Limpa ecrã
who: Lista todas variáveis definidas
whos: Lista detalhadamente todas variáveis
what: Lista todos arquivos do octave no diretório
path: Mostra todos os diretórios onde o octave procura os m-files
source $file : Executa os comandos no arquivo
pwd : Lista diretório atual
type function/program : Imprime script no ecrã
edit fucntion/program : Edita arquivo ou função em editor externo


Formatar display:
---------------------------------------------
Command   Description  Example
* bank      Fixed dollars and cents 3.14
* compact   Suppresses excess line feeds to show more output in a single screen. 
Contrast with loose.  theta = pi/2 = 1.5708
* long 	    15-digit scaled fixed point   3.14159265358979
* long e    15-digit floating poin       3.14159265358979
* long g    Best of 15-digit fixed or floating point 3.141592653589793e+00
* rat  	    Ratio of small integers  355/113
* short     5-digit scaled fixed point  3.1416
* short e   5-digit floating point  3.1416e+00
* short g   Best of 5-digit fixed or floating point  3.1416



To run myscript.m in Matlab do:
matlab -nodisplay -r myscript -logfile myscript.log
octave myscript.m > myscript.log



----------------------------------------------------------------
Retorna ponto do mouse clicado na figura/grafico:

[X, Y, BUTTONS] = ginput (N)
Return which mouse buttons were pressed and keys were hit on the
current figure.  If N is defined, then wait for N mouse clicks
before returning.  If N is not defined, then `ginput' will loop
until the return key is pressed.


----------------------------------------------------------------
Interpolação linear

>>>> Interpolação Linear
t=linspace(0,10,1000)
y=exp(-t).*t
tt=4
yy=interp1(t,y,tt)   



---------------------------------------------------------------
Debug:
	Breakpoints  rline=dbstop("func",line)
	Clear breakpoints  dbclear("func",line)
 
---------------------------------------------------------------
|		        TIPS AND TRICKS			      |
---------------------------------------------------------------
Solução de um conjunto de equações não-lineares


>> function y=f(x)
y(1)=-2*x(1)**2+3*x(1)*x(2)+4*sin(x(2))-6;
y(2)=3*x(1)**2-2*x(1)*x(2)**2+3*cos(x(1))+4;
endfunction
>> [x,info]=fsolve('f',[1;2])
x =
0.57983
2.54621
info = 1

--------------------------------------------------------------

#  nome_func=@(var) corpo_da_função;
      #                                  corpo_da_função - uma variável normal (não string).
# Semelhante ao primeiro caso,
       # Apropriado para passagem de parâmetros que sejam funções.
# Isto é, quando uma função tem como parâmetro outra função.
#Exemplo do uso para definir f=x^2+1:
       >f = @(x)x.^2+1;
f =
@(x) x .^ 2 + 1
>f(1)
ans =  2
>
f =
@(x) x. ^ 2 + 1
>x=linspace(-1,1,50);
>plot(x,f(x))

----------------------------------------------------------------------
		         VETORES

Indexing 
Always "row before column"! 
 aij = A(i,j) Get an element 
 r = A(i,:) Get a row 
 c = A(:,j) Get a column 
 B = A(i:k,j:l) Get a submatrix

Matrices 
Matrix Operations 
 B = 3*A Multiply by scalar 
 C = A*B + X - D Add and multiply 
 B = A' Transpose A 
 B = inv(A) Invert A 
 s = v'*Q*v Mix vectors and matrices
 d = det(A) Determinant of A 
 [v lambda] = eig(A) Eigenvalue decomposition 
 [U S V] = svd(A) Sing. value decomposition


Vector Operations 
With x being a column vector 
 s = x'*x Inner product, result is a scalar 
 X = x*x' Outer product, result is a matrix 
 e = x*x Gives an error 


Element-Wise Operations (for vectors/matrices) 
 s = x.+x Element-wise addition 
 p = x.*x Element-wise multiplication 
 q = x./x Element-wise division 
 e = x.^3 Element-wise power operator


Useful Vector Functions 
 sum(v) Compute sum of elements of v 
 cumsum(v) Compute cumulative sum of 
elements of v 
 prod(v) Compute product of elements of v 
 cumprod(v) Compute cumulative product of 
elements of v 
 diff(v) Compute difference of subsequent 
elements [v(2)-v(1) v(3)-v(2) ...] 
 mean(v) Mean value of elements in v 
 std(v) Standard deviation of elements




		-----------------------------------


function x=threshold(x,th)
for xid=1:length(x)
	if abs(x(xid))<th
		x(xid)=0;
end

Em uma linha:
x(abs(x)<th)=0

		-----------------------------------

t=linspace(0,100,10)

t=0:8
%t= 0 1 2 3 4 5 6 7 8

t=0:2:10 
%t=2,4,6,8,10

t' : Vetor transposto coluna


Criar vetor de mesmo tamanho de v
t=zeros(size(v))



Pre-allocation. If you must use a for loop, try not to grow an array inside it:

X = zeros(1, N);
for nn = 1:N
    X(nn) = fn(nn);
end
% Do NOT do:
X = [];
for nn = 1:N
    X = [X fn(nn)];
end










----------------------------------------------------------------------
			MATRIZE

octave:##> I = eye(4)
I =
1 0 0 0
0 1 0 0
0 0 1 0
0 0 0 1


octave:##> diag([-1 7 2])
ans =
-1 0 0
0 7 0
0 0 2

Building composite matrices
octave:##> comp = [eye(3) B;
A zeros(2,2)]
comp =
1 0 0 2 0
0 1 0 0 -1
0 0 1 1 0
5 7 9 0 0
-1 3 -2 0 0

Matrices as tables
ctave:##> t=0:0.2:1;
octave:##> freq=[sin(t)’ sin(2*t)’, sin(3*t)’]
freq =
0 0 0
0.1987 0.3894 0.5646
0.3894 0.7174 0.9320
0.5646 0.9320 0.9738
0.7174 0.9996 0.6755
0.8415 0.9093 0.1411

Extracting bits of matrices

octave:##> J = [
1 2 3 4
5 6 7 8
11 13 18 10];
octave:##> J(1,1)
ans =

octave:##> J(2,3)
ans =
4
octave:##> J(1:2, 4) %Rows 1-2, column 4
ans =
4
8
octave:##> J(3,:) %Row 3, all columns
ans =
11 13 18 10


octave:##> J(3, 2:3) = [-1 0]
J =
1 2 3 4
5 6 7 8
11 -1 0 10
